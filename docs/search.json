[
  {
    "objectID": "vidigi_docs/vidigi_vs_bupar.html",
    "href": "vidigi_docs/vidigi_vs_bupar.html",
    "title": "Vidigi vs BupaR",
    "section": "",
    "text": "The title of this section is perhaps misleading! As the author of the package, I think the visuals produced by the two packages occupy slightly different niches, and the use of both can benefit your project.\nAs an additional bonus, the process of creating the logs you require for a vidigi project give you the perfect dataset for your bupaR visuals too!\nbupaR outputs could form part of a verification and validation strategy. They can also perform part of your communications strategy, helping to provide a talking point for meetings with stakeholders in much the same way as a screenshot of your Simul8 or Anylogic model would. In the absence of a graphical interface for building a model, the bupar outputs can help you - and your stakeholders - to ensure that linkages between different model steps are sensible and appropriate.\nWe will begin in Python, working to add a couple of columns to our vidigi event log to prepare it for use in bupaR.\nNow, it’s time to move to R (as bupaR and the bupaverse is only implemented in R).\npm4py exists as a process analytics package for Python, but the visuals of bupaR are of a high quality.",
    "crumbs": [
      "Other",
      "Vidigi vs BupaR"
    ]
  },
  {
    "objectID": "vidigi_docs/vidigi_vs_bupar.html#creating-outputs",
    "href": "vidigi_docs/vidigi_vs_bupar.html#creating-outputs",
    "title": "Vidigi vs BupaR",
    "section": "Creating outputs",
    "text": "Creating outputs\n\nProcess Maps\n\nAbsolute frequencies\n\nactivity_log %&gt;%\n    process_map(frequency(\"absolute\"))\n\n\n\n\n\n\nactivity_log %&gt;%\n    process_map(frequency(\"absolute-case\"))\n\n\n\n\n\n\n\nRelative frequencies\n\nactivity_log %&gt;%\n    process_map(frequency(\"relative\"))\n\n\n\n\n\n\nactivity_log %&gt;%\n    process_map(frequency(\"relative-case\"),\n              render_options = list(edge_label_color = \"white\"))\n\n\n\n\n\n\nactivity_log %&gt;%\n    process_map(frequency(\"relative-consequent\"),\n              render_options = list(edge_label_color = \"white\"))\n\n\n\n\n\n\n\n\nPerformance Maps\n\nMean Waits\n\nactivity_log %&gt;%\n    process_map(performance())\n\n\n\n\n\n\n\nMax Waits\n\nactivity_log %&gt;%\n    process_map(performance(FUN = max))\n\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `label = do.call(...)`.\nℹ In group 9: `ACTIVITY_CLASSIFIER_ = NA` and `from_id = NA`.\nCaused by warning in `type()`:\n! no non-missing arguments to max; returning -Inf\n\n\nWarning: There were 2 warnings in `summarize()`.\nThe first warning was:\nℹ In argument: `value = do.call(...)`.\nℹ In group 1: `ACTIVITY_CLASSIFIER_ = \"ARTIFICIAL_END\"`, `next_act = NA`,\n  `from_id = 1`, `to_id = NA`.\nCaused by warning in `type()`:\n! no non-missing arguments to max; returning -Inf\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\n\n\n\n\n\n\n90th percentile\n\np90 &lt;- function(x, ...) {\n    quantile(x, probs = 0.9, ...)\n}\n\nactivity_log %&gt;%\n    process_map(performance(FUN = p90))\n\n\n\n\n\n\n\n\nAnalytics\nTake a look at this page in the bupaR docs details of each of these plots.\n\nIdle Time\n\nactivity_log %&gt;%\n    idle_time(\"resource\", units = \"mins\")\n\n# A tibble: 20 × 2\n   resource_id_full       idle_time     \n   &lt;chr&gt;                  &lt;drtn&gt;        \n 1 MINORS_treatment_1     2101.6612 mins\n 2 MINORS_treatment_2     2065.5869 mins\n 3 MINORS_treatment_3     2043.3483 mins\n 4 MINORS_treatment_4     1945.5681 mins\n 5 TRAUMA_treatment_1     1415.3914 mins\n 6 TRAUMA_treatment_2     1275.9829 mins\n 7 TRAUMA_treatment_3     1208.0795 mins\n 8 TRAUMA_treatment_5     1098.2404 mins\n 9 triage_2               1043.9654 mins\n10 triage_1                999.9198 mins\n11 TRAUMA_treatment_4      959.1452 mins\n12 MINORS_registration_2   951.0949 mins\n13 MINORS_registration_1   943.0261 mins\n14 TRAUMA_stabilisation_1  881.6663 mins\n15 TRAUMA_stabilisation_2  714.7071 mins\n16 TRAUMA_stabilisation_3  691.9842 mins\n17 TRAUMA_stabilisation_4  564.1900 mins\n18 MINORS_examination_2    469.1167 mins\n19 MINORS_examination_1    463.9669 mins\n20 MINORS_examination_3    441.1148 mins\n\n\n\nactivity_log %&gt;%\n    idle_time(\"resource\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\nProcessing Time\n\nactivity_log %&gt;%\n    processing_time(\"log\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    processing_time(\"case\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    processing_time(\"activity\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    processing_time(\"resource-activity\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\nThroughput time\n\nactivity_log %&gt;%\n    throughput_time(\"log\", units = \"mins\") %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\nActivity Presence\n\nactivity_log %&gt;%\n    activity_presence() %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\n\nResource visualisations\n\nHandover-of-work network\n\nactivity_log %&gt;%\n    resource_map()\n\n\n\n\n\n\n\nResource precedence matrix\n\nactivity_log %&gt;%\n    resource_matrix() %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\n\nProcess matrix\n\nactivity_log %&gt;%\n    process_matrix(frequency(\"absolute\")) %&gt;%\n    plot()\n\n\n\n\n\n\n\n\n\n\nTrace Explorer\nThis plot helps us to unerstand how often different combinations of activities occur, and whether there are any unexpected paths in our data.\n\nactivity_log %&gt;%\n    trace_explorer(n_traces = 10)\n\nWarning: Fewer traces (6) found than specified `n_traces` (10).\n\n\n\n\n\n\n\n\n\n\n\nAnimated process map\n\nactivity_log %&gt;%\n    animate_process()\n\n\n\n\n\nLet’s compare directly with our vidigi output.\n\n\n\n\n\n\nTip\n\n\n\nThe key difference between what is produced via bupaverse’s animate_process and what can be created via vidigi is the ability of vidigi to more clearly show the scale of queues, and the number of resources available at any given point.\nVidigi can also more clearly highlight the impact of priority on resources through the use of distinct icons, though this is not demonstrated in this example.\n\n\n\n\n\n\n\n\nClick here to expand vidigi animation generation code\n\n\n\n\n\n\nfrom examples.example_2_branching_multistep.ex_2_model_classes import Trial, g\nfrom vidigi.animation import animate_activity_log\nimport pandas as pd\nimport plotly.io as pio\n#pio.renderers.default = \"notebook\"\npio.renderers.default = \"iframe\"\n\ng.sim_duration = 3000\ng.number_of_runs = 3\n\nmy_trial = Trial()\n\nmy_trial.run_trial()\n\nevent_position_df = pd.DataFrame([\n                # {'event': 'arrival', 'x':  10, 'y': 250, 'label': \"Arrival\" },\n\n                # Triage - minor and trauma\n                {'event': 'triage_wait_begins',\n                 'x':  160, 'y': 375, 'label': \"Waiting for&lt;br&gt;Triage\"  },\n                {'event': 'triage_begins',\n                 'x':  160, 'y': 315, 'resource':'n_triage', 'label': \"Being Triaged\" },\n\n                # Minors (non-trauma) pathway\n                {'event': 'MINORS_registration_wait_begins',\n                 'x':  300, 'y': 145, 'label': \"Waiting for&lt;br&gt;Registration\"  },\n                {'event': 'MINORS_registration_begins',\n                 'x':  300, 'y': 85, 'resource':'n_reg', 'label':'Being&lt;br&gt;Registered'  },\n\n                {'event': 'MINORS_examination_wait_begins',\n                 'x':  465, 'y': 145, 'label': \"Waiting for&lt;br&gt;Examination\"  },\n                {'event': 'MINORS_examination_begins',\n                 'x':  465, 'y': 85, 'resource':'n_exam', 'label': \"Being&lt;br&gt;Examined\" },\n\n                {'event': 'MINORS_treatment_wait_begins',\n                 'x':  630, 'y': 145, 'label': \"Waiting for&lt;br&gt;Treatment\"  },\n                {'event': 'MINORS_treatment_begins',\n                 'x':  630, 'y': 85, 'resource':'n_cubicles_non_trauma_treat', 'label': \"Being&lt;br&gt;Treated\" },\n\n                # Trauma pathway\n                {'event': 'TRAUMA_stabilisation_wait_begins',\n                 'x': 300, 'y': 560, 'label': \"Waiting for&lt;br&gt;Stabilisation\" },\n                {'event': 'TRAUMA_stabilisation_begins',\n                 'x': 300, 'y': 490, 'resource':'n_trauma', 'label': \"Being&lt;br&gt;Stabilised\" },\n\n                {'event': 'TRAUMA_treatment_wait_begins',\n                 'x': 630, 'y': 560, 'label': \"Waiting for&lt;br&gt;Treatment\" },\n                {'event': 'TRAUMA_treatment_begins',\n                 'x': 630, 'y': 490, 'resource':'n_cubicles_trauma_treat', 'label': \"Being&lt;br&gt;Treated\" },\n\n                 {'event': 'exit',\n                 'x':  670, 'y': 330, 'label': \"Exit\"}\n            ])\n\n\nanimate_activity_log(\n        event_log=my_trial.all_event_logs[my_trial.all_event_logs['run']==0],\n        event_position_df=event_position_df,\n        scenario=g(),\n        entity_col_name=\"patient\",\n        debug_mode=False,\n        setup_mode=False,\n        every_x_time_units=5,\n        include_play_button=True,\n        gap_between_entities=10,\n        gap_between_rows=20,\n        plotly_height=900,\n        plotly_width=1600,\n        override_x_max=700,\n        override_y_max=675,\n        icon_and_text_size=20,\n        wrap_queues_at=10,\n        step_snapshot_max=50,\n        limit_duration=3000,\n        time_display_units=\"dhm\",\n        display_stage_labels=False,\n        add_background_image=\"https://raw.githubusercontent.com/Bergam0t/vidigi/refs/heads/main/examples/example_2_branching_multistep/Full%20Model%20Background%20Image%20-%20Horizontal%20Layout.drawio.png\",\n    )\n\n\n\n\n\n\n\n\n\n\n\nOther chart types\n\nDotted chart\nWe can see the impact of the pattern of daily arrivals across the course of the model, with the waits clearing out overnight when arrivals slow down.\n\nactivity_log %&gt;%\n    dotted_chart(x = \"absolute\")\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    dotted_chart(x = \"relative\", sort=\"start\")\n\n\n\n\n\n\n\n\n\n\nBreaking down dotted charts by route\n\nMinors\n\nactivity_log %&gt;%\n    filter(event_name %in% c('MINORS_examination', 'MINORS_registration', 'MINORS_treatment', 'triage')) %&gt;%\n    dotted_chart(x = \"absolute\")\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    filter(event_name %in% c('MINORS_examination', 'MINORS_registration', 'MINORS_treatment', 'triage')) %&gt;%\n    dotted_chart(x = \"relative\", sort=\"start\")\n\n\n\n\n\n\n\n\n\n\nTrauma\n\nactivity_log %&gt;%\n    filter(event_name %in% c('TRAUMA_stabilisation', 'TRAUMA_treatment', 'triage')) %&gt;%\n    dotted_chart(x = \"absolute\")\n\n\n\n\n\n\n\n\n\nactivity_log %&gt;%\n    filter(event_name %in% c('TRAUMA_stabilisation', 'TRAUMA_treatment', 'triage')) %&gt;%\n    dotted_chart(x = \"relative\", sort=\"start\")",
    "crumbs": [
      "Other",
      "Vidigi vs BupaR"
    ]
  },
  {
    "objectID": "vidigi_docs/vidigi_vs_bupar.html#conclusion",
    "href": "vidigi_docs/vidigi_vs_bupar.html#conclusion",
    "title": "Vidigi vs BupaR",
    "section": "Conclusion",
    "text": "Conclusion\nvidigi and bupaR are complementary packages to use when visualising, verifying and validating your simulation models - or working with real-world process data.",
    "crumbs": [
      "Other",
      "Vidigi vs BupaR"
    ]
  }
]