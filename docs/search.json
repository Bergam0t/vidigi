[
  {
    "objectID": "vidigi_docs/introduction.html",
    "href": "vidigi_docs/introduction.html",
    "title": "Usage Instructions with SimPy",
    "section": "",
    "text": "Visual display of the outputs of discrete event simulations in simpy have been identified as one of the limitations of simpy, potentially hindering adoption of FOSS simulation in comparison to commercial modelling offerings or GUI FOSS alternatives such as JaamSim.\n\nWhen compared to commercial DES software packages that are commonly used in health research, such as Simul8, or AnyLogic, a limitation of our approach is that we do not display a dynamic patient pathway or queuing network that updates as the model runs a single replication. This is termed Visual Interactive Simulation (VIS) and can help users understand where process problems and delays occur in a patient pathway; albeit with the caveat that single replications can be outliers. A potential FOSS solution compatible with a browser-based app could use a Python package that can represent a queuing network, such as NetworkX, and displaying results via matplotlib. If sophisticated VIS is essential for a FOSS model then researchers may need to look outside of web apps; for example, salabim provides a powerful FOSS solution for custom animation of DES models. - Monks T and Harper A. Improving the usability of open health service delivery simulation models using Python and web apps [version 2; peer review: 3 approved]. NIHR Open Res 2023, 3:48 (https://doi.org/10.3310/nihropenres.13467.2)\n\nThis package allows visually appealing, flexible visualisations of the movement of entities through some kind of pathway.\nIt is primarily tested with discrete event simulations to be created from simpy models, such as the examples below.\n\nPlotly is leveraged to create the final animation, meaning that users can benefit from the ability to further customise or extend the plotly plot, as well as easily integrating with web frameworks such as Streamlit, Dash or Shiny for Python.\nThe code has been designed to be flexible and could potentially be used with alternative simulation packages such as ciw or simmer if it is possible to provide all of the required details in the logs that are output.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#introduction",
    "href": "vidigi_docs/introduction.html#introduction",
    "title": "Usage Instructions with SimPy",
    "section": "",
    "text": "Visual display of the outputs of discrete event simulations in simpy have been identified as one of the limitations of simpy, potentially hindering adoption of FOSS simulation in comparison to commercial modelling offerings or GUI FOSS alternatives such as JaamSim.\n\nWhen compared to commercial DES software packages that are commonly used in health research, such as Simul8, or AnyLogic, a limitation of our approach is that we do not display a dynamic patient pathway or queuing network that updates as the model runs a single replication. This is termed Visual Interactive Simulation (VIS) and can help users understand where process problems and delays occur in a patient pathway; albeit with the caveat that single replications can be outliers. A potential FOSS solution compatible with a browser-based app could use a Python package that can represent a queuing network, such as NetworkX, and displaying results via matplotlib. If sophisticated VIS is essential for a FOSS model then researchers may need to look outside of web apps; for example, salabim provides a powerful FOSS solution for custom animation of DES models. - Monks T and Harper A. Improving the usability of open health service delivery simulation models using Python and web apps [version 2; peer review: 3 approved]. NIHR Open Res 2023, 3:48 (https://doi.org/10.3310/nihropenres.13467.2)\n\nThis package allows visually appealing, flexible visualisations of the movement of entities through some kind of pathway.\nIt is primarily tested with discrete event simulations to be created from simpy models, such as the examples below.\n\nPlotly is leveraged to create the final animation, meaning that users can benefit from the ability to further customise or extend the plotly plot, as well as easily integrating with web frameworks such as Streamlit, Dash or Shiny for Python.\nThe code has been designed to be flexible and could potentially be used with alternative simulation packages such as ciw or simmer if it is possible to provide all of the required details in the logs that are output.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#examples",
    "href": "vidigi_docs/introduction.html#examples",
    "title": "Usage Instructions with SimPy",
    "section": "Examples",
    "text": "Examples\nTo develop and demonstrate the concept, it has so far been used to incorporate visualisation into several existing simpy models that were not initially designed with this sort of visualisation in mind: - a minor injuries unit, showing the utility of the model at high resolutions with branching pathways and the ability to add in a custom background to clearly demarcate process steps\n\n\nan elective surgical pathway (with a focus on cancelled theatre slots due to bed unavailability in recovery areas), with length of stay displayed as well as additional text and graphical data\n\n\n\na community mental health assessment pathway, showing the wait to an appointment as well as highlighting ‘urgent’ patients with a different icon and showing the time from referral to appointment below the patient icons when they attend the appointment.\n\n\n\na community mental health assessment pathway with pooling of clinics, showing the ‘home’ clinic for clients via icon so the balance between ‘home’ and ‘other’ clients can be explored.\n\n\n\na community mental health assessment and treatment pathway, showing the movement of clients between a wait list, a booking list, and returning for repeat appointments over a period of time while sitting on a caseload in between.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#creating-a-visualisation-from-an-existing-model",
    "href": "vidigi_docs/introduction.html#creating-a-visualisation-from-an-existing-model",
    "title": "Usage Instructions with SimPy",
    "section": "Creating a visualisation from an existing model",
    "text": "Creating a visualisation from an existing model\nTwo key things need to happen to existing models to work with the visualisation code: 1. All simpy resources need to be changed to simpy stores containing a custom resource with an ID attribute 2. Logging needs to be added at key points: arrival, (queueing, resource use start, resource use end), departure where the steps in the middle can be repeated for as many queues and resource types as required\n\n1. All simpy resources need to be changed to simpy stores containing a custom resource with an ID attribute\nTo allow the use of resources to be visualised correctly - with entities staying with the same resource throughout the time they are using it - it is essential to be able to identify and track individual resources.\nBy default, this is not possible with Simpy resources. They have no ID attribute or similar.\n\n\nClick here for behind-the-scenes details on this\n\nThe easiest workaround which drops fairly painlessly into existing models is to use a simpy store with a custom resource class.\nThe custom resource is setup as follows:\n\nclass CustomResource(simpy.Resource):\n    def __init__(self, env, capacity, id_attribute=None):\n        super().__init__(env, capacity)\n        self.id_attribute = id_attribute\n\n    def request(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a request is made\n        return super().request(*args, **kwargs)\n\n    def release(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a release is made\n        return super().release(*args, **kwargs)\n\nThe creation of simpy resources is then replaced with the following pattern:\n\nbeds = simpy.Store(environment)\n\nfor i in range(number_of_beds):\n    beds.put(\n        CustomResource(\n            environment,\n            capacity=1,\n            id_attribute=i+1)\n        )\n\n\nvidigi.utils provides a helper function for setting up simpy resources in teh required manner.\nFor a given resource that would have been created like this:\n\nnurses = simpy.Resource(simpy_environment, capacity=number_of_nurses)\n\nYou would use\n\nfrom vidigi.utils import populate_store\nnurses = simpy.Store(simpy_environment)\n\npopulate_store(num_resources=number_of_nurses, simpy_store=nurses, sim_env=simpy_environment)\n\nInstead of requesting a resource in the standard way, you instead use the .get() method.\n\nreq = beds.get()\n\nor\n\nwith beds.get() as req:\n  ...CODE HERE THAT USES THE RESOURCE...\n\nAt the end, it is important to put the resource back into the store, even if you used the ‘with’ notation, so it can be made available to the next requester:\n\nbeds.put(req)\n\nThis becomes slightly more complex with conditional requesting (for example, where a resource request is made but if it cannot be fulfilled in time, the requester will renege). This is demonstrated in example 3.\nThe benefit of this is that when we are logging, we can use the .id_attribute attribute of the custom resource to record the resource that was in use. This can have wider benefits for monitoring individual resource utilisation within your model as well.\n\n\n2. Logging needs to be added at key points\nThe animation function needs to be passed an event log with the following layout:\n\n\n\n\n\n\n\n\n\n\n\npatient\npathway\nevent_type\nevent\ntime\nresource_id\n\n\n\n\n15\nPrimary\narrival_departure\narrival\n1.22\n\n\n\n15\nPrimary\nqueue\nenter_queue_for_bed\n1.35\n\n\n\n27\nRevision\narrival_departure\narrival\n1.47\n\n\n\n27\nRevision\nqueue\nenter_queue_for_bed\n1.58\n\n\n\n12\nPrimary\nresource_use_end\npost_surgery_stay_ends\n1.9\n4\n\n\n15\nRevision\nresource_use\npost_survery_stay_begins\n1.9\n4\n\n\n\nOne easy way to achieve this is by appending dictionaries to a list at each important point in the process. For example:\n\nevent_log = []\n...\n...\nevent_log.append(\n      {'patient': id,\n      'pathway': 'Revision',\n      'event_type': 'resource_use',\n      'event': 'post_surgery_stay_begins',\n      'time': self.env.now,\n      'resource_id': bed.id_attribute}\n  )\n\nThe list of dictionaries can then be converted to a pandas dataframe using\n\npd.DataFrame(event_log)\n\nand passed to the animation function where required.\n\nEvent types\nFour event types are supported in the model: ‘arrival_departure’, ‘resource_use’, ‘resource_use_end’, and ‘queue’.\nAs a minimum, you will require the use of ‘arrival_departure’ events and one of - ‘resource_use’/‘resource_use_end’ - OR ‘queue’\nYou can also use both ‘resource_use’ and ‘queue’ within the same model very effectively (see ex_1_simplest_case and ex_2_branching_and_optional_paths).\n\narrival_departure\nWithin this, a minimum of two ‘arrival_departure’ events per entity are mandatory - arrival and depart, both with an event_type of arrival_departure, as shown below.\n\nevent_log.append(\n      {'patient': unique_entity_identifier,\n      'pathway': 'Revision',\n      'event_type': 'arrival_departure',\n      'event': 'arrival',\n      'time': env.now}\n  )\n\n\nevent_log.append(\n      {'patient': unique_entity_identifier,\n      'pathway': 'Revision',\n      'event_type': 'arrival_departure',\n      'event': 'depart',\n      'time': env.now}\n  )\n\nThese are critical as they are used to determine when patients should first and last appear in the model. Forgetting to include a departure step for all types of patients can lead to slow model performance as the size of the event logs for individual moments will continue to increase indefinitely.\n\n\nqueue\nQueues are key steps in the model.\nIt is possible to solely use queues and never make use of a simpy resource.\nBy tracking each important step in the process as a ‘queue’ step, the movement of patients can be accurately tracked.\nPatients will be ordered by the point at which they are added to the queue, with the first entries appearing at the front (bottom-right) of the queue.\n\nevent_log.append(\n            {'patient': unique_entity_identifier,\n             'pathway': 'High intensity',\n             'event_type': 'queue',\n             'event': 'appointment_booked_waiting',\n             'time': self.env.now\n             }\n        )\n\nWhile the keys shown above are mandatory, you can add as many additional keys to a step’s log as desired. This can allow you to flexibly make use of the event log for other purposes as well as the animation.\n\n\nresource_use and resource_use_end\nResource use is more complex to include but comes with two key benefits over the queue: - it becomes easier to monitor the length of time a resource is in use by a single entity as users won’t ‘move through’ the resource use stage (which can also prove confusing to less experienced viewers) - it becomes possible to show the total number of resources that are available, making it easier to understand how well resources are being utilised at different stages\n\nclass CustomResource(simpy.Resource):\n    def __init__(self, env, capacity, id_attribute=None):\n        super().__init__(env, capacity)\n        self.id_attribute = id_attribute\n\n    def request(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a request is made\n        # For example, you can assign an ID to the requester\n        # self.id_attribute = assign_id_logic()\n        return super().request(*args, **kwargs)\n\n    def release(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a release is made\n        # For example, you can reset the ID attribute\n        # reset_id_logic(self.id_attribute)\n        return super().release(*args, **kwargs)\n\ntriage = simpy.Store(self.env)\n\nfor i in range(n_triage):\n    triage.put(\n        CustomResource(\n            env,\n            capacity=1,\n            id_attribute = i+1)\n        )\n\n# request sign-in/triage\ntriage_resource = yield triage.get()\n\nevent_log.append(\n    {'patient': unique_entity_identifier,\n     'pathway': 'Trauma',\n     'event_type': 'resource_use',\n     'event': 'triage_begins',\n     'time': env.now,\n     'resource_id': triage_resource.id_attribute\n    }\n)\n\nyield self.env.timeout(1)\n\nevent_log.append(\n            {'patient': unique_entity_identifier,\n             'pathway': 'Trauma',\n             'event_type': 'resource_use_end',\n             'event': 'triage_complete',\n             'time': env.now,\n             'resource_id': triage_resource.id_attribute}\n        )\n\n# Resource is no longer in use, so put it back in the store\ntriage.put(triage_resource)\n\nWhen providing your event position details, it then just requires you to include an identifier for the resource.\nNOTE: At present this requires you to be using an class to manage your resource counts (if following HSMA simpy structure, this will be your g class).\nThis requirement is planned to be removed in a future version of the work, allowing more flexibility.\n\n{'event': 'TRAUMA_stabilisation_begins',\n 'x': 300, 'y': 500, 'resource':'n_trauma', 'label': \"Being&lt;br&gt;Stabilised\" }",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#creating-the-animation",
    "href": "vidigi_docs/introduction.html#creating-the-animation",
    "title": "Usage Instructions with SimPy",
    "section": "Creating the animation",
    "text": "Creating the animation\n\nDetermining event positioning in the animation\nOnce the event log has been created, the positions of each queue and resource must be set up.\nAn easy way to create this is passing a list of dictionaries to the pd.DataFrame function.\nThe columns required are event: This must match the label used for the event in the event log x: The x coordinate of the event for the animation. This will correspond to the bottom-right hand corner of a queue, or the rightmost resource. y: The y coordinate of the event for the animaation. This will correspond to the lowest row of a queue, or the central point of the resources. label: A label for the stage. This can be hidden at a later step if you opt to use a background image with labels built-in. Note that line breaks in the label can be created using the HTML tag &lt;br&gt;. resource (OPTIONAL): Only required if the step is a resource_use step. This looks at the ‘scenario’ object passed to the animate_activity_log() function and pulls the attribute with the given name, which should give the number of available resources for that step.\n\n        event_position_df = pd.DataFrame([\n                # Triage\n                {'event': 'triage_wait_begins',\n                 'x':  160, 'y': 400, 'label': \"Waiting for&lt;br&gt;Triage\"  },\n                {'event': 'triage_begins',\n                 'x':  160, 'y': 315, 'resource':'n_triage', 'label': \"Being Triaged\" },\n\n                # Trauma pathway\n                {'event': 'TRAUMA_stabilisation_wait_begins',\n                 'x': 300, 'y': 560, 'label': \"Waiting for&lt;br&gt;Stabilisation\" },\n                {'event': 'TRAUMA_stabilisation_begins',\n                 'x': 300, 'y': 500, 'resource':'n_trauma', 'label': \"Being&lt;br&gt;Stabilised\" },\n\n                {'event': 'TRAUMA_treatment_wait_begins',\n                 'x': 630, 'y': 560, 'label': \"Waiting for&lt;br&gt;Treatment\" },\n                {'event': 'TRAUMA_treatment_begins',\n                 'x': 630, 'y': 500, 'resource':'n_cubicles', 'label': \"Being&lt;br&gt;Treated\" },\n\n                 {'event': 'exit',\n                 'x':  670, 'y': 330, 'label': \"Exit\"}\n            ])\n\n\n\nCreating the animation\nThere are two main ways to create the animation:\n\nusing the one-step function animate_activity_log() (see pages/1_Simple_ED_interactive, pages/2_Simple_ED_Forced_Overcrowding or pages/3_Complex_ED_Interactive for examples of this)\nusing the functions reshape_for_animations(), generate_animation_df() and generate_animation() separately, passing the output of each to the next step. This allows you to apply significant extra customisations; examples demonstrating this will be added soon.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#emergency-department-treatment-centre-model",
    "href": "vidigi_docs/introduction.html#emergency-department-treatment-centre-model",
    "title": "Usage Instructions with SimPy",
    "section": "Emergency department (Treatment Centre) model",
    "text": "Emergency department (Treatment Centre) model\nMonks.T, Harper.A, Anagnoustou. A, Allen.M, Taylor.S. (2022) Open Science for Computer Simulation\nhttps://github.com/TomMonks/treatment-centre-sim\nThe layout code for the emergency department model: https://github.com/hsma-programme/Teaching_DES_Concepts_Streamlit",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#the-hospital-efficiency-project-model",
    "href": "vidigi_docs/introduction.html#the-hospital-efficiency-project-model",
    "title": "Usage Instructions with SimPy",
    "section": "The hospital efficiency project model",
    "text": "The hospital efficiency project model\nHarper, A., & Monks, T. Hospital Efficiency Project Orthopaedic Planning Model Discrete-Event Simulation [Computer software]. https://doi.org/10.5281/zenodo.7951080\nhttps://github.com/AliHarp/HEP/tree/main",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/introduction.html#simulation-model-with-scheduling-example",
    "href": "vidigi_docs/introduction.html#simulation-model-with-scheduling-example",
    "title": "Usage Instructions with SimPy",
    "section": "Simulation model with scheduling example",
    "text": "Simulation model with scheduling example\nMonks, T.\nhttps://github.com/health-data-science-OR/stochastic_systems\nhttps://github.com/health-data-science-OR/stochastic_systems/tree/master/labs/simulation/lab5",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "",
    "text": "Warning\n\n\n\nThis section is currently in progress\nOn the Health Service Modelling Associates (HSMA) course we teach a particular way of writing your simpy models. More details of the approach we take can be found in our Little Book of DES.\nHowever, the core concepts of adding vidigi to your models will be the same across different models - so this example will hopefully be helpful regardless of the way you structure your simpy models.",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#vidigis-requirements",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#vidigis-requirements",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "Vidigi’s requirements",
    "text": "Vidigi’s requirements\nThe key input vidigi requires an event log of the times that each entity in your system reached key milestones like arriving in the system, beginning to queue for a resource, being seen by a resource, and exiting the system.\nWe also need to tell vidigi what kind of activity is happening at each point:\n\narrive/depart\nqueue\nresource_use\n\nWe also provide vidigi with a table of coordinates to lay out\nVidigi then takes this event log and will process it into a table that tracks the position of every entity in the system at specified time intervals. It also handles the layout",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#hsma-model-structure",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#hsma-model-structure",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "HSMA Model Structure",
    "text": "HSMA Model Structure\nIn HSMA, we use four primary classes to structure our models:\n\ng, which stores model parameters (like the number of resources of a given type and distribution parameters) and simulation parameters (like the number of replications to run and the )\nEntity, which may be named something more descriptive like ‘Patient’ or ‘Customer’. You may also have more than one entity class. Each entity will store information such as its ID, and will be passed into the model to work through the pathway.\nModel, which will generate entities, simulate the pathway the entity takes through the system, and contain a way to run a single replication of the model\nTrial, which allows us to run the simulation multiple times, collect results from all of these, and get an indication of average performance and performance variation across our different model runs",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#a-simple-model",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#a-simple-model",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "A Simple Model",
    "text": "A Simple Model\nWe’re going to start off with a very simple model of a walk-in clinic pathway.\nIn this clinic, patients arrive and are seen in the order they arrive by one of several available nurses. All nurses have the same skillset, so the queue is a simple first-in-first-out (FIFO). There is some variability in the arrival time of patients, as well as variability in how long it takes for each patient to be seen.\n\nthe g Class\nIn our g class, we set up parameters that will be used throughout.\n\nclass g:\n    random_number_set = 42 # Control the initial seeds of each stream of pseudorandom numbers used\n\n    n_cubicles = 4 # The number of treatment cubicles\n    trauma_treat_mean = 40 # Mean of the trauma cubicle treatment distribution (Lognormal)\n    trauma_treat_var = 5 # Variance of the trauma cubicle treatment distribution (Lognormal)\n\n    arrival_rate = 5 # mean of the exponential distribution for sampling the inter-arrival time of entities\n\n\n    sim_duration = 600 # The number of time units the simulation will run for\n    number_of_runs = 100 # The number of times the simulation will be run with different random number streams\n\n\n\nthe Patient Class\n\nclass Patient:\n    def __init__(self, p_id):\n        self.identifier = p_id\n        self.arrival = -np.inf\n        self.wait_treat = -np.inf\n        self.total_time = -np.inf\n        self.treat_duration = -np.inf",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#making-changes-for-vidigi",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#making-changes-for-vidigi",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "Making Changes for Vidigi",
    "text": "Making Changes for Vidigi\n\nthe g Class\nOur g class is unchanged\n\n\nthe Entity Class\nOur entity class - in this case, Patient - is unchanged\n\n\nthe Model Class\n\n\n\n\n\n\n\n\n\n\n\nthe Trial Class",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#using-vidigi-to-create-an-animation-from-our-event-log",
    "href": "vidigi_docs/adding_vidigi_to_a_simple_simpy_model_hsma_structure.html#using-vidigi-to-create-an-animation-from-our-event-log",
    "title": "Adding Vidigi to a Simple simpy Model (HSMA Structure)",
    "section": "Using vidigi to create an animation from our event log",
    "text": "Using vidigi to create an animation from our event log\nFor simple animations with vidigi, it is recommended that you use the animate_activity_log function.\nThis all-in-one function takes an event log of the structure discussed above,",
    "crumbs": [
      "Walkthroughs",
      "Adding Vidigi to a Simple simpy Model (HSMA Structure)"
    ]
  },
  {
    "objectID": "reference/utils.populate_store.html",
    "href": "reference/utils.populate_store.html",
    "title": "utils.populate_store",
    "section": "",
    "text": "utils.populate_store(num_resources, simpy_store, sim_env)\nPopulate a SimPy Store (or VidigiPriorityStore) with CustomResource objects.\nThis function creates a specified number of CustomResource objects and adds them to a SimPy Store or VidigiPriorityStore.\nEach CustomResource is initialized with a capacity of 1 and a unique ID attribute, which is crucial for animation functions where you wish to show an individual entity consistently using the same resource.\nIf using VidigiPriorityStore, you will need to pass the relevant priority in to the .get() argument when pulling a resource out of the store.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnum_resources\nint\nThe number of CustomResource objects to create and add to the store.\nrequired\n\n\nsimpy_store\nsimpy.Store or vidigi.utils.VidigiPriorityStore\nThe SimPy Store object to populate with resources.\nrequired\n\n\nsim_env\nsimpy.Environment\nThe SimPy environment in which the resources and store exist.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nEach CustomResource is created with a capacity of 1.\nThe ID attribute of each CustomResource is set to its index in the creation loop plus one, ensuring unique IDs starting from 1.\nThis function is typically used to initialize a pool of resources at the start of a simulation.\n\n\n\n\n&gt;&gt;&gt; import simpy\n&gt;&gt;&gt; env = simpy.Environment()\n&gt;&gt;&gt; resource_store = simpy.Store(env)\n&gt;&gt;&gt; populate_store(5, resource_store, env)\n&gt;&gt;&gt; len(resource_store.items)  # The store now contains 5 CustomResource objects\n5",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.populate_store"
    ]
  },
  {
    "objectID": "reference/utils.populate_store.html#parameters",
    "href": "reference/utils.populate_store.html#parameters",
    "title": "utils.populate_store",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nnum_resources\nint\nThe number of CustomResource objects to create and add to the store.\nrequired\n\n\nsimpy_store\nsimpy.Store or vidigi.utils.VidigiPriorityStore\nThe SimPy Store object to populate with resources.\nrequired\n\n\nsim_env\nsimpy.Environment\nThe SimPy environment in which the resources and store exist.\nrequired",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.populate_store"
    ]
  },
  {
    "objectID": "reference/utils.populate_store.html#returns",
    "href": "reference/utils.populate_store.html#returns",
    "title": "utils.populate_store",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nNone",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.populate_store"
    ]
  },
  {
    "objectID": "reference/utils.populate_store.html#notes",
    "href": "reference/utils.populate_store.html#notes",
    "title": "utils.populate_store",
    "section": "",
    "text": "Each CustomResource is created with a capacity of 1.\nThe ID attribute of each CustomResource is set to its index in the creation loop plus one, ensuring unique IDs starting from 1.\nThis function is typically used to initialize a pool of resources at the start of a simulation.",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.populate_store"
    ]
  },
  {
    "objectID": "reference/utils.populate_store.html#examples",
    "href": "reference/utils.populate_store.html#examples",
    "title": "utils.populate_store",
    "section": "",
    "text": "&gt;&gt;&gt; import simpy\n&gt;&gt;&gt; env = simpy.Environment()\n&gt;&gt;&gt; resource_store = simpy.Store(env)\n&gt;&gt;&gt; populate_store(5, resource_store, env)\n&gt;&gt;&gt; len(resource_store.items)  # The store now contains 5 CustomResource objects\n5",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.populate_store"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html",
    "href": "reference/utils.CustomResource.html",
    "title": "utils.CustomResource",
    "section": "",
    "text": "utils.CustomResource(self, env, capacity, id_attribute=None)\nA custom resource class that extends simpy.Resource with an additional ID attribute.\nThis class allows for more detailed tracking and management of resources in a simulation by adding an ID attribute to each resource instance.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nenv\nsimpy.Environment\nThe SimPy environment in which this resource exists.\nrequired\n\n\ncapacity\nint\nThe capacity of the resource (how many units can be in use simultaneously).\nrequired\n\n\nid_attribute\nany\nAn identifier for the resource (default is None).\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nid_attribute\nany\nAn identifier for the resource, which can be used for custom tracking or logic.\n\n\n\n\n\n\nThis class inherits from simpy.Resource and overrides the request and release methods to allow for custom handling of the id_attribute. The actual implementation of ID assignment or reset logic should be added by the user as needed.\n\n\n\nenv = simpy.Environment()\ncustom_resource = CustomResource(env, capacity=1, id_attribute=\"Resource_1\")\ndef process(env, resource):\n    with resource.request() as req:\n        yield req\n        print(f\"Using resource with ID: {resource.id_attribute}\")\n        yield env.timeout(1)\nenv.process(process(env, custom_resource))\nenv.run()\nUsing resource with ID: Resource_1\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrelease\nRelease the resource.\n\n\nrequest\nRequest the resource.\n\n\n\n\n\nutils.CustomResource.release(*args, **kwargs)\nRelease the resource.\nThis method can be customized to handle the ID attribute when a release is made. Currently, it simply calls the parent class’s release method.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nutils.CustomResource.request(*args, **kwargs)\nRequest the resource.\nThis method can be customized to handle the ID attribute when a request is made. Currently, it simply calls the parent class’s request method.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nsimpy.events.Request\nA SimPy request event.",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html#parameters",
    "href": "reference/utils.CustomResource.html#parameters",
    "title": "utils.CustomResource",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nenv\nsimpy.Environment\nThe SimPy environment in which this resource exists.\nrequired\n\n\ncapacity\nint\nThe capacity of the resource (how many units can be in use simultaneously).\nrequired\n\n\nid_attribute\nany\nAn identifier for the resource (default is None).\nNone",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html#attributes",
    "href": "reference/utils.CustomResource.html#attributes",
    "title": "utils.CustomResource",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nid_attribute\nany\nAn identifier for the resource, which can be used for custom tracking or logic.",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html#notes",
    "href": "reference/utils.CustomResource.html#notes",
    "title": "utils.CustomResource",
    "section": "",
    "text": "This class inherits from simpy.Resource and overrides the request and release methods to allow for custom handling of the id_attribute. The actual implementation of ID assignment or reset logic should be added by the user as needed.",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html#examples",
    "href": "reference/utils.CustomResource.html#examples",
    "title": "utils.CustomResource",
    "section": "",
    "text": "env = simpy.Environment()\ncustom_resource = CustomResource(env, capacity=1, id_attribute=\"Resource_1\")\ndef process(env, resource):\n    with resource.request() as req:\n        yield req\n        print(f\"Using resource with ID: {resource.id_attribute}\")\n        yield env.timeout(1)\nenv.process(process(env, custom_resource))\nenv.run()\nUsing resource with ID: Resource_1",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/utils.CustomResource.html#methods",
    "href": "reference/utils.CustomResource.html#methods",
    "title": "utils.CustomResource",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrelease\nRelease the resource.\n\n\nrequest\nRequest the resource.\n\n\n\n\n\nutils.CustomResource.release(*args, **kwargs)\nRelease the resource.\nThis method can be customized to handle the ID attribute when a release is made. Currently, it simply calls the parent class’s release method.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nutils.CustomResource.request(*args, **kwargs)\nRequest the resource.\nThis method can be customized to handle the ID attribute when a request is made. Currently, it simply calls the parent class’s request method.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nsimpy.events.Request\nA SimPy request event.",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.CustomResource"
    ]
  },
  {
    "objectID": "reference/prep.generate_animation_df.html",
    "href": "reference/prep.generate_animation_df.html",
    "title": "prep.generate_animation_df",
    "section": "",
    "text": "prep.generate_animation_df(\n    full_patient_df,\n    event_position_df,\n    wrap_queues_at=20,\n    step_snapshot_max=50,\n    gap_between_entities=10,\n    gap_between_resources=10,\n    gap_between_rows=30,\n    debug_mode=False,\n    custom_entity_icon_list=None,\n)\nGenerate a DataFrame for animation purposes by adding position information to patient data.\nThis function takes patient event data and adds positional information for visualization, handling both queuing and resource use events.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfull_patient_df\npd.DataFrame\nOutput of reshape_for_animation(), containing patient event data.\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame with columns ‘event’, ‘x’, and ‘y’, specifying initial positions for each event type.\nrequired\n\n\nwrap_queues_at\nint\nNumber of entities in a queue before wrapping to a new row (default is 20).\n20\n\n\nstep_snapshot_max\nint\nMaximum number of patients to show in each snapshot (default is 50).\n50\n\n\ngap_between_entities\nint\nHorizontal spacing between entities in pixels (default is 10).\n10\n\n\ngap_between_resources\nint\nHorizontal spacing between resources in pixels (default is 10).\n10\n\n\ngap_between_rows\nint\nVertical spacing between rows in pixels (default is 30).\n30\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\nA DataFrame with added columns for x and y positions, and icons for each patient.\n\n\n\n\n\n\n\nThe function handles both queuing and resource use events differently.\nIt assigns unique icons to patients for visualization.\nQueues can be wrapped to multiple rows if they exceed a specified length.\nThe function adds a visual indicator for additional patients when exceeding the snapshot limit.\n\n\n\n\n\nWrite a test to ensure that no patient ID appears in multiple places at a single minute.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.generate_animation_df"
    ]
  },
  {
    "objectID": "reference/prep.generate_animation_df.html#parameters",
    "href": "reference/prep.generate_animation_df.html#parameters",
    "title": "prep.generate_animation_df",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfull_patient_df\npd.DataFrame\nOutput of reshape_for_animation(), containing patient event data.\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame with columns ‘event’, ‘x’, and ‘y’, specifying initial positions for each event type.\nrequired\n\n\nwrap_queues_at\nint\nNumber of entities in a queue before wrapping to a new row (default is 20).\n20\n\n\nstep_snapshot_max\nint\nMaximum number of patients to show in each snapshot (default is 50).\n50\n\n\ngap_between_entities\nint\nHorizontal spacing between entities in pixels (default is 10).\n10\n\n\ngap_between_resources\nint\nHorizontal spacing between resources in pixels (default is 10).\n10\n\n\ngap_between_rows\nint\nVertical spacing between rows in pixels (default is 30).\n30\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.generate_animation_df"
    ]
  },
  {
    "objectID": "reference/prep.generate_animation_df.html#returns",
    "href": "reference/prep.generate_animation_df.html#returns",
    "title": "prep.generate_animation_df",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\npd.DataFrame\nA DataFrame with added columns for x and y positions, and icons for each patient.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.generate_animation_df"
    ]
  },
  {
    "objectID": "reference/prep.generate_animation_df.html#notes",
    "href": "reference/prep.generate_animation_df.html#notes",
    "title": "prep.generate_animation_df",
    "section": "",
    "text": "The function handles both queuing and resource use events differently.\nIt assigns unique icons to patients for visualization.\nQueues can be wrapped to multiple rows if they exceed a specified length.\nThe function adds a visual indicator for additional patients when exceeding the snapshot limit.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.generate_animation_df"
    ]
  },
  {
    "objectID": "reference/prep.generate_animation_df.html#todo",
    "href": "reference/prep.generate_animation_df.html#todo",
    "title": "prep.generate_animation_df",
    "section": "",
    "text": "Write a test to ensure that no patient ID appears in multiple places at a single minute.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.generate_animation_df"
    ]
  },
  {
    "objectID": "reference/animation.generate_animation.html",
    "href": "reference/animation.generate_animation.html",
    "title": "animation.generate_animation",
    "section": "",
    "text": "animation.generate_animation(\n    full_patient_df_plus_pos,\n    event_position_df,\n    scenario=None,\n    plotly_height=900,\n    plotly_width=None,\n    include_play_button=True,\n    add_background_image=None,\n    display_stage_labels=True,\n    icon_and_text_size=24,\n    override_x_max=None,\n    override_y_max=None,\n    time_display_units=None,\n    start_date=None,\n    resource_opacity=0.8,\n    custom_resource_icon=None,\n    gap_between_resources=10,\n    setup_mode=False,\n    frame_duration=400,\n    frame_transition_duration=600,\n    debug_mode=False,\n)\nGenerate an animated visualization of patient flow through a system.\nThis function creates an interactive Plotly animation based on patient data and event positions.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfull_patient_df_plus_pos\npd.DataFrame\nDataFrame containing patient data with position information. This will be the output of passing an event log through the reshape_for_animations() and generate_animation_df() functions\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame specifying the positions of different events.\nrequired\n\n\nscenario\nobject\nObject containing attributes for resource counts at different steps.\nNone\n\n\nplotly_height\nint\nHeight of the Plotly figure in pixels (default is 900).\n900\n\n\nplotly_width\nint\nWidth of the Plotly figure in pixels (default is None).\nNone\n\n\ninclude_play_button\nbool\nWhether to include a play button in the animation (default is True).\nTrue\n\n\nadd_background_image\nstr\nPath to a background image file to add to the animation (default is None).\nNone\n\n\ndisplay_stage_labels\nbool\nWhether to display labels for each stage (default is True).\nTrue\n\n\nicon_and_text_size\nint\nSize of icons and text in the animation (default is 24).\n24\n\n\noverride_x_max\nint\nOverride the maximum x-coordinate (default is None).\nNone\n\n\noverride_y_max\nint\nOverride the maximum y-coordinate (default is None).\nNone\n\n\ntime_display_units\nstr\nUnits for displaying time. Options are ‘dhm’ (days, hours, minutes), ‘d’ (days), or None (default).\nNone\n\n\nstart_date\nstr\nStart date for the animation in ‘YYYY-MM-DD’ format. Only used when time_display_units is ‘d’ (default is None).\nNone\n\n\nresource_opacity\nfloat\nOpacity of resource icons (default is 0.8).\n0.8\n\n\ncustom_resource_icon\nstr\nCustom icon to use for resources (default is None).\nNone\n\n\ngap_between_resources\nint\nSpacing between resources in pixels (default is 10).\n10\n\n\nsetup_mode\nbool\nWhether to run in setup mode, showing grid and tick marks (default is False).\nFalse\n\n\nframe_duration\nint\nDuration of each frame in milliseconds (default is 400).\n400\n\n\nframe_transition_duration\nint\nDuration of transition between frames in milliseconds (default is 600).\n600\n\n\ndebug_mode\nbool\nWhether to run in debug mode with additional output (default is False).\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nplotly.graph_objs._figure.Figure\nAn animated Plotly figure object representing the patient flow.\n\n\n\n\n\n\n\nThe function uses Plotly Express to create an animated scatter plot.\nTime can be displayed as actual dates or as model time units.\nThe animation supports customization of icon sizes, resource representation, and animation speed.\nA background image can be added to provide context for the patient flow.\n\n\n\n\n&gt;&gt;&gt; animation = generate_animation(patient_df, event_positions, scenario,\n...                                time_display_units='dhm',\n...                                add_background_image='path/to/image.png')\n&gt;&gt;&gt; animation.show()",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "animation.generate_animation"
    ]
  },
  {
    "objectID": "reference/animation.generate_animation.html#parameters",
    "href": "reference/animation.generate_animation.html#parameters",
    "title": "animation.generate_animation",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfull_patient_df_plus_pos\npd.DataFrame\nDataFrame containing patient data with position information. This will be the output of passing an event log through the reshape_for_animations() and generate_animation_df() functions\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame specifying the positions of different events.\nrequired\n\n\nscenario\nobject\nObject containing attributes for resource counts at different steps.\nNone\n\n\nplotly_height\nint\nHeight of the Plotly figure in pixels (default is 900).\n900\n\n\nplotly_width\nint\nWidth of the Plotly figure in pixels (default is None).\nNone\n\n\ninclude_play_button\nbool\nWhether to include a play button in the animation (default is True).\nTrue\n\n\nadd_background_image\nstr\nPath to a background image file to add to the animation (default is None).\nNone\n\n\ndisplay_stage_labels\nbool\nWhether to display labels for each stage (default is True).\nTrue\n\n\nicon_and_text_size\nint\nSize of icons and text in the animation (default is 24).\n24\n\n\noverride_x_max\nint\nOverride the maximum x-coordinate (default is None).\nNone\n\n\noverride_y_max\nint\nOverride the maximum y-coordinate (default is None).\nNone\n\n\ntime_display_units\nstr\nUnits for displaying time. Options are ‘dhm’ (days, hours, minutes), ‘d’ (days), or None (default).\nNone\n\n\nstart_date\nstr\nStart date for the animation in ‘YYYY-MM-DD’ format. Only used when time_display_units is ‘d’ (default is None).\nNone\n\n\nresource_opacity\nfloat\nOpacity of resource icons (default is 0.8).\n0.8\n\n\ncustom_resource_icon\nstr\nCustom icon to use for resources (default is None).\nNone\n\n\ngap_between_resources\nint\nSpacing between resources in pixels (default is 10).\n10\n\n\nsetup_mode\nbool\nWhether to run in setup mode, showing grid and tick marks (default is False).\nFalse\n\n\nframe_duration\nint\nDuration of each frame in milliseconds (default is 400).\n400\n\n\nframe_transition_duration\nint\nDuration of transition between frames in milliseconds (default is 600).\n600\n\n\ndebug_mode\nbool\nWhether to run in debug mode with additional output (default is False).\nFalse",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "animation.generate_animation"
    ]
  },
  {
    "objectID": "reference/animation.generate_animation.html#returns",
    "href": "reference/animation.generate_animation.html#returns",
    "title": "animation.generate_animation",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nplotly.graph_objs._figure.Figure\nAn animated Plotly figure object representing the patient flow.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "animation.generate_animation"
    ]
  },
  {
    "objectID": "reference/animation.generate_animation.html#notes",
    "href": "reference/animation.generate_animation.html#notes",
    "title": "animation.generate_animation",
    "section": "",
    "text": "The function uses Plotly Express to create an animated scatter plot.\nTime can be displayed as actual dates or as model time units.\nThe animation supports customization of icon sizes, resource representation, and animation speed.\nA background image can be added to provide context for the patient flow.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "animation.generate_animation"
    ]
  },
  {
    "objectID": "reference/animation.generate_animation.html#examples",
    "href": "reference/animation.generate_animation.html#examples",
    "title": "animation.generate_animation",
    "section": "",
    "text": "&gt;&gt;&gt; animation = generate_animation(patient_df, event_positions, scenario,\n...                                time_display_units='dhm',\n...                                add_background_image='path/to/image.png')\n&gt;&gt;&gt; animation.show()",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "animation.generate_animation"
    ]
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "",
    "text": "Current mechanism\nIn short, the final plot is an animated plotly scatterplot.\nIn theory, there’s nothing to stop it using an alternative mode of action (e.g. svg), but one benefit of plotly is that it nicely deals with the intermediate paths of patients. It is also available in both Python and R with minimal changes and has extensive compatability with other tools - e.g. Streamlit, Dash.\nThere are a couple of key steps to setting up the visualisation 1. Adding logging steps to the model 2. Swapping the use of resources for simpy stores containing resources 3. Creating an object that stores resources - a ‘scenario’ object - which then informs the number of resources displayed 4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval) 5. Using Plotly to display these logs"
  },
  {
    "objectID": "notes.html#adding-logging-steps-to-the-model",
    "href": "notes.html#adding-logging-steps-to-the-model",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "1. Adding logging steps to the model",
    "text": "1. Adding logging steps to the model\nFive key classes of events need to be logged for every patient: - arrival - queue - resource use start - resource use end (could possibly be removed) - depart\nSimple improvements required include applying consistency to naming (e.g. arrival and departure, arrive and depart, not a mixture of the two)\nAt present, five to six things are recorded per log. ‘Pathway’ could potentially be removed.\nThis whole structure could be rewritten to be significantly less verbose. It is written like this at present because of the ease of transforming this structure of dictionary to a dataframe and the flexibility of the structure, but exploring alternatives like key:value pairs of event:time could be explored.\nCurrenly, the key logs take the following format\nArrival:\nself.full_event_log.append({\n    'patient': self.identifier,\n    'pathway': 'Simplest',\n    'event_type': 'arrival_departure',\n    'event': 'arrival',\n    'time': self.env.now\n})\nQueueing:\nself.full_event_log.append({\n    'patient': self.identifier,\n    'pathway': 'Simplest',\n    'event': 'treatment_wait_begins',\n    'event_type': 'queue',\n    'time': self.env.now\n})\nResource Use Start:\nself.full_event_log.append({\n    'patient': self.identifier,\n    'pathway': 'Simplest',\n    'event': 'treatment_begins',\n    'event_type': 'resource_use',\n    'time': self.env.now,\n    'resource_id': treatment_resource.id_attribute\n})\nResource Use End:\nself.full_event_log.append({\n    'patient': self.identifier,\n    'pathway': 'Simplest',\n    'event': 'treatment_complete',\n    'event_type': 'resource_use_end',\n    'time': self.env.now,\n    'resource_id': treatment_resource.id_attribute\n})\nDeparture:\nself.full_event_log.append({\n    'patient': self.identifier,\n    'pathway': 'Simplest',\n    'event': 'depart',\n    'event_type': 'arrival_departure',\n    'time': self.env.now\n})"
  },
  {
    "objectID": "notes.html#swapping-the-use-of-resources-for-simpy-stores-containing-resources",
    "href": "notes.html#swapping-the-use-of-resources-for-simpy-stores-containing-resources",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "2. Swapping the use of resources for simpy stores containing resources",
    "text": "2. Swapping the use of resources for simpy stores containing resources\nWhen a resource is in use, we need to be able to show a single entity consistently hogging the same resource throughout the full time they are using it.\nSimpy resources do not inherently have any ID attribute. After exploring options like monkey patching the resource class, a better alternative seemed to be using a simpy store - which does have an ID - instead of a straight resource.\nWithout this ID attribute, the default logic used to move entities through the steps results in them visually behaving like a queue, which makes it hard to understand how long someone has been using a resource for and is visually confusing.\nFortunately the code changes required are minimal. We initialise the store, then use a loop to create as many resources within that store as required.\ndef init_resources(self):\n    '''\n    Init the number of resources\n    and store in the arguments container object\n\n    Resource list:\n        1. Nurses/treatment bays (same thing in this model)\n\n    '''\n    self.args.treatment = simpy.Store(self.env)\n\n    for i in range(self.args.n_cubicles_1):\n        self.args.treatment.put(\n            CustomResource(\n                self.env,\n                capacity=1,\n                id_attribute = i+1)\n            )\nUse of the resource then becomes\n# Seize a treatment resource when available\ntreatment_resource = yield self.args.treatment.get()\nWhen the timeout has elapsed, we then use the following code.\n# Resource is no longer in use, so put it back in\nself.args.treatment.put(treatment_resource)\nThis has additional benefits of making it easier to monitor the use of individual resources.\nOne thing that has been noticed is that the resources seem to be cycled through in order. For example, if you have 4 resources and all are available, but the last resource to be in use was resource 2, resource 3 will be seized the next time someone requires a resource. This may not be entirely realistic, and code to ‘shake up’ the resources after use may be worth exploring."
  },
  {
    "objectID": "notes.html#creating-an-object-that-stores-resources---a-scenario-object---which-then-informs-the-number-of-resources-displayed",
    "href": "notes.html#creating-an-object-that-stores-resources---a-scenario-object---which-then-informs-the-number-of-resources-displayed",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "3. Creating an object that stores resources - a ‘scenario’ object - which then informs the number of resources displayed",
    "text": "3. Creating an object that stores resources - a ‘scenario’ object - which then informs the number of resources displayed\nAt present this part of the code expects a scenario object. This could be changed to - expect a dictionary instead - work with either a scenario or dictionary object (maybe if the route of expanding TM’s approach to simpy modelling into an opinionated framework)\nIf going with the first option, the scenario class used in TM’s work routinely could be expanded to include a method to export the required data to a dictionary format.\n\nevents_with_resources = event_position_df[event_position_df['resource'].notnull()].copy()\nevents_with_resources['resource_count'] = events_with_resources['resource'].apply(lambda x: getattr(scenario, x))\n\nevents_with_resources = events_with_resources.join(events_with_resources.apply(\n    lambda r: pd.Series({'x_final': [r['x']-(10*(i+1)) for i in range(r['resource_count'])]}), axis=1).explode('x_final'),\n    how='right')\n\nfig.add_trace(go.Scatter(\n    x=events_with_resources['x_final'].to_list(),\n    # Place these slightly below the y position for each entity\n    # that will be using the resource\n    y=[i-10 for i in events_with_resources['y'].to_list()],\n    mode=\"markers\",\n    # Define what the marker will look like\n    marker=dict(\n        color='LightSkyBlue',\n        size=15),\n    opacity=0.8,\n    hoverinfo='none'\n))\n\nThe function reshape_for_animations()"
  },
  {
    "objectID": "notes.html#using-plotly-to-display-these-logs",
    "href": "notes.html#using-plotly-to-display-these-logs",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "5. Using Plotly to display these logs",
    "text": "5. Using Plotly to display these logs\nThe function animate_activity_log currently takes 3 mandatory parameters: - full_patient_df - event_position_df - scenario\nfull_patient_df is the output of the function reshape_for_animations\nThe graph is a plotly scatterplot. The initial animated plot is created using plotly express, with additional static layers added afterwards.\nEach individual is a scatter point. The actual points are fully transparent, and what we see is a text label - the emoji.\nA list of any length of emojis is required. This will then be joined with a distinct patient table to provide a list of patients."
  },
  {
    "objectID": "notes.html#already-created",
    "href": "notes.html#already-created",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Already created",
    "text": "Already created\n\nSimple pathway (units: minutes)\nPathway with branching and optional steps (units: weeks)"
  },
  {
    "objectID": "notes.html#not-yet-created---additional-features-possibly-required",
    "href": "notes.html#not-yet-created---additional-features-possibly-required",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Not yet created - additional features possibly required",
    "text": "Not yet created - additional features possibly required\n\nSimple pathway (units: days, weeks)\nResource numbers that change at different points of the day\nPrioritised queueing\nShared resources\nMultiple resources required for a step (e.g. doctor + cubicle - how to display this?)\nReneging\nJockeying\nBalking"
  },
  {
    "objectID": "notes.html#known-areas-for-attention",
    "href": "notes.html#known-areas-for-attention",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Known areas for attention",
    "text": "Known areas for attention\n\nThe code is not written in an object oriented manner.\nThere’s a bug in the wrapping code that results in queues building out in a diagonal manner (shifted 1 to the left) from the 3rd row onwards (2nd row counts to 11 instead of 10, and then subsequent rows correctly include 10 but start too far over)"
  },
  {
    "objectID": "notes.html#required-enhancements",
    "href": "notes.html#required-enhancements",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Required enhancements",
    "text": "Required enhancements\n\nAt present, the queue of users will continue to grow indefinitely until it leaves the boundary."
  },
  {
    "objectID": "notes.html#friction-points",
    "href": "notes.html#friction-points",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Friction points",
    "text": "Friction points\n\nSetting up the background image can be a fiddly process"
  },
  {
    "objectID": "notes.html#other-limitations",
    "href": "notes.html#other-limitations",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Other limitations",
    "text": "Other limitations\n\nBy avoiding emojis that were released after v12.0 of the emoji standard (released in early 2019), we can ensure compatability with most major OSs. Windows 10 has not been updated past this point. However, due to the nature of emojis, we cannot absolutely ensure full compatability across all systems."
  },
  {
    "objectID": "notes.html#concerns",
    "href": "notes.html#concerns",
    "title": "4. Iterating through the logs to make a minute-by-minute picture of the position of every patient (or any desired interval)",
    "section": "Concerns",
    "text": "Concerns\n\nCurrently, logging can cope with ~5 minute snapshots for 5 days of logs in a system that has ~10-60 people in the system at any given point in time. This results in a self-contained plot of ~20mb when exported (for comparison, a self-contained line chart with some additional rectangles is &lt;20kb).\n\n5 days was chosen as a good limit for the streamlit teaching app as it offered a good balance between speed and minimized the risk of crashing across different choices of parameters.\n\nIf significantly too few resources are provided at a given step, the size of the animation dataframe quickly gets out of hand (as people aren’t getting through the system so the number of people in the system at each snapshot is very large)\n\nWorking on a way of displaying queues after a threshold number of people is reached will help significantly"
  },
  {
    "objectID": "examples/example_4_ciw/ex_4_ciw.html",
    "href": "examples/example_4_ciw/ex_4_ciw.html",
    "title": "Example 4: A ciw Model",
    "section": "",
    "text": "Note that this example is written using ciw 2.x\nIt will not run with 3.x - but could theoretically be adapted to do so\nThe ‘logs’ object is the result of running\nsim_engine.get_all_records()\nHowever, note that while we run multiple replications, we only pass the records for a single replication to the event_log_from_ciw_recs function.\n\nThe underlying model code is from Monks, T., Harper, A., & Heather, A. (2023). Towards Sharing Tools, Artefacts, and Reproducible Simulation: a ciw model example (v1.0.1). Zenodo. https://doi.org/10.5281/zenodo.10051494\nSee here for the adaptation embedded within that repo: https://github.com/Bergam0t/ciw-example-animation/tree/main\n\n\nimport pandas as pd\n# Import the wrapper objects for model interaction.\nfrom examples.example_4_ciw.ex_4_ciw_model import Experiment, multiple_replications\nfrom vidigi.utils import event_log_from_ciw_recs\nfrom vidigi.animation import animate_activity_log\n\n\nN_OPERATORS = 13\nN_NURSES = 9\nRESULTS_COLLECTION_PERIOD = 1000\n\nuser_experiment = Experiment(n_operators=N_OPERATORS,\n                             n_nurses=N_NURSES,\n                             chance_callback=0.4)\n\n# run multiple replications\nresults, logs = multiple_replications(user_experiment, n_reps=10)\n\n# the 'logs' object contains a list, where each entry is the recs object for that run\nlogs_run_1 = logs[0]\n\nprint(len(logs_run_1))\n\n2240\n\n\n\n# let's print all of the outputs for a single individual\n[print(log) for log in logs_run_1 if log.id_number==500]\n\n# let's now try turning this into an event log\nevent_log_test = event_log_from_ciw_recs(logs_run_1, node_name_list=[\"operator\", \"nurse\"])\n\nevent_log_test.head(25)\n\nRecord(id_number=500, customer_class=0, original_customer_class=0, node=1, arrival_date=287.6396005571297, waiting_time=0.0, service_start_date=287.6396005571297, service_time=7.199228099941479, service_end_date=294.8388286570712, time_blocked=0.0, exit_date=294.8388286570712, destination=-1, queue_size_at_arrival=12, queue_size_at_departure=6, server_id=13, record_type='service')\n\n\n\n\n\n\n\n\n\npatient\npathway\nevent_type\nevent\ntime\nresource_id\n\n\n\n\n0\n1\nModel\narrival_departure\narrival\n0.578986\nNaN\n\n\n1\n1\nModel\nqueue\noperator_wait_begins\n0.578986\nNaN\n\n\n2\n1\nModel\nresource_use\noperator_begins\n0.578986\n1.0\n\n\n3\n1\nModel\nresource_use\noperator_ends\n8.191760\n1.0\n\n\n4\n1\nModel\nqueue\nnurse_wait_begins\n8.191760\nNaN\n\n\n5\n1\nModel\nresource_use\nnurse_begins\n8.191760\n1.0\n\n\n6\n1\nModel\nresource_use\nnurse_ends\n20.318068\n1.0\n\n\n7\n1\nModel\narrival_departure\ndepart\n20.318068\nNaN\n\n\n8\n2\nModel\narrival_departure\narrival\n1.472150\nNaN\n\n\n9\n2\nModel\nqueue\noperator_wait_begins\n1.472150\nNaN\n\n\n10\n2\nModel\nresource_use\noperator_begins\n1.472150\n2.0\n\n\n11\n2\nModel\nresource_use\noperator_ends\n10.201862\n2.0\n\n\n12\n2\nModel\nqueue\nnurse_wait_begins\n10.201862\nNaN\n\n\n13\n2\nModel\nresource_use\nnurse_begins\n10.201862\n3.0\n\n\n14\n2\nModel\nresource_use\nnurse_ends\n22.937920\n3.0\n\n\n15\n2\nModel\narrival_departure\ndepart\n22.937920\nNaN\n\n\n16\n3\nModel\narrival_departure\narrival\n1.565093\nNaN\n\n\n17\n3\nModel\nqueue\noperator_wait_begins\n1.565093\nNaN\n\n\n18\n3\nModel\nresource_use\noperator_begins\n1.565093\n3.0\n\n\n19\n3\nModel\nresource_use\noperator_ends\n8.522090\n3.0\n\n\n20\n3\nModel\narrival_departure\ndepart\n8.522090\nNaN\n\n\n21\n4\nModel\narrival_departure\narrival\n1.672159\nNaN\n\n\n22\n4\nModel\nqueue\noperator_wait_begins\n1.672159\nNaN\n\n\n23\n4\nModel\nresource_use\noperator_begins\n1.672159\n4.0\n\n\n24\n4\nModel\nresource_use\noperator_ends\n8.275919\n4.0\n\n\n\n\n\n\n\n\n# Create required event_position_df for vidigi animation\nevent_position_df = pd.DataFrame([\n                    {'event': 'arrival',\n                     'x':  30, 'y': 350,\n                     'label': \"Arrival\"},\n\n                    {'event': 'operator_wait_begins',\n                     'x':  205, 'y': 270,\n                     'label': \"Waiting for Operator\"},\n\n                    {'event': 'operator_begins',\n                     'x':  210, 'y': 210,\n                     'resource':'n_operators',\n                     'label': \"Speaking to operator\"},\n\n                    {'event': 'nurse_wait_begins',\n                     'x':  205, 'y': 110,\n                     'label': \"Waiting for Nurse\"},\n\n                    {'event': 'nurse_begins',\n                     'x':  210, 'y': 50,\n                     'resource':'n_nurses',\n                     'label': \"Speaking to Nurse\"},\n\n                    {'event': 'exit',\n                     'x':  270, 'y': 10,\n                     'label': \"Exit\"}\n\n                ])\n\n\n# Create a suitable class to pass in the resource numbers\nclass model_params():\n    n_operators = N_OPERATORS\n    n_nurses = N_NURSES\n\n\n# Create animation\nanimate_activity_log(\n        event_log=event_log_test,\n        event_position_df= event_position_df,\n        scenario=model_params(),\n        debug_mode=True,\n        setup_mode=False,\n        every_x_time_units=1,\n        include_play_button=True,\n        icon_and_text_size=20,\n        gap_between_entities=8,\n        gap_between_rows=25,\n        plotly_height=700,\n        frame_duration=200,\n        plotly_width=1200,\n        override_x_max=300,\n        override_y_max=300,\n        limit_duration=RESULTS_COLLECTION_PERIOD,\n        wrap_queues_at=25,\n        step_snapshot_max=75,\n        time_display_units=\"dhm\",\n        display_stage_labels=True,\n    )\n\nAnimation function called at 18:32:43\nIteration through minute-by-minute logs complete 18:32:52\nSnapshot df concatenation complete at 18:32:52\nReshaped animation dataframe finished construction at 18:32:52\nPlacement dataframe finished construction at 18:32:52\nOutput animation generation complete at 18:33:00\nTotal Time Elapsed: 17.43 seconds\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "Examples",
      "Example 4: A ciw Model"
    ]
  },
  {
    "objectID": "examples/example_2_branching_multistep/ex_2_branching_multistep_case.html",
    "href": "examples/example_2_branching_multistep/ex_2_branching_multistep_case.html",
    "title": "Example 2: Branching + Multi-step Case",
    "section": "",
    "text": "from examples.example_2_branching_multistep.ex_2_model_classes import Trial, g\nfrom vidigi.animation import animate_activity_log\nimport pandas as pd\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\n\n\nmy_trial = Trial()\n\nmy_trial.run_trial()\n\n\nmy_trial.all_event_logs.head(50)\n\n\n\n\n\n\n\n\npatient\npathway\nevent\nevent_type\ntime\nresource_id\nrun\n\n\n\n\n0\n1\nShared\narrival\narrival_departure\n3.285355\nNaN\n0\n\n\n1\n1\nNon-Trauma\ntriage_wait_begins\nqueue\n3.285355\nNaN\n0\n\n\n2\n1\nNon-Trauma\ntriage_begins\nresource_use\n3.285355\n1.0\n0\n\n\n3\n2\nShared\narrival\narrival_departure\n3.289691\nNaN\n0\n\n\n4\n2\nNon-Trauma\ntriage_wait_begins\nqueue\n3.289691\nNaN\n0\n\n\n5\n2\nNon-Trauma\ntriage_begins\nresource_use\n3.289691\n2.0\n0\n\n\n6\n1\nNon-Trauma\ntriage_complete\nresource_use_end\n7.364946\n1.0\n0\n\n\n7\n1\nNon-Trauma\nMINORS_registration_wait_begins\nqueue\n7.364946\nNaN\n0\n\n\n8\n1\nNon-Trauma\nMINORS_registration_begins\nresource_use\n7.364946\n1.0\n0\n\n\n9\n2\nNon-Trauma\ntriage_complete\nresource_use_end\n9.407274\n2.0\n0\n\n\n10\n2\nNon-Trauma\nMINORS_registration_wait_begins\nqueue\n9.407274\nNaN\n0\n\n\n11\n2\nNon-Trauma\nMINORS_registration_begins\nresource_use\n9.407274\n2.0\n0\n\n\n12\n1\nNon-Trauma\nMINORS_registration_complete\nresource_use_end\n15.418481\n1.0\n0\n\n\n13\n1\nNon-Trauma\nMINORS_examination_wait_begins\nqueue\n15.418481\nNaN\n0\n\n\n14\n1\nNon-Trauma\nMINORS_examination_begins\nresource_use\n15.418481\n1.0\n0\n\n\n15\n2\nNon-Trauma\nMINORS_registration_complete\nresource_use_end\n17.104670\n2.0\n0\n\n\n16\n2\nNon-Trauma\nMINORS_examination_wait_begins\nqueue\n17.104670\nNaN\n0\n\n\n17\n2\nNon-Trauma\nMINORS_examination_begins\nresource_use\n17.104670\n2.0\n0\n\n\n18\n1\nNon-Trauma\nMINORS_examination_complete\nresource_use_end\n31.636252\n1.0\n0\n\n\n19\n1\nShared\ndepart\narrival_departure\n31.636252\nNaN\n0\n\n\n20\n2\nNon-Trauma\nMINORS_examination_complete\nresource_use_end\n32.875857\n2.0\n0\n\n\n21\n2\nNon-Trauma\nrequires_treatment\nattribute_assigned\n32.875857\nNaN\n0\n\n\n22\n2\nNon-Trauma\nMINORS_treatment_wait_begins\nqueue\n32.875857\nNaN\n0\n\n\n23\n2\nNon-Trauma\nMINORS_treatment_begins\nresource_use\n32.875857\n1.0\n0\n\n\n24\n3\nShared\narrival\narrival_departure\n33.426168\nNaN\n0\n\n\n25\n3\nNon-Trauma\ntriage_wait_begins\nqueue\n33.426168\nNaN\n0\n\n\n26\n3\nNon-Trauma\ntriage_begins\nresource_use\n33.426168\n1.0\n0\n\n\n27\n3\nNon-Trauma\ntriage_complete\nresource_use_end\n33.545008\n1.0\n0\n\n\n28\n3\nNon-Trauma\nMINORS_registration_wait_begins\nqueue\n33.545008\nNaN\n0\n\n\n29\n3\nNon-Trauma\nMINORS_registration_begins\nresource_use\n33.545008\n1.0\n0\n\n\n30\n4\nShared\narrival\narrival_departure\n37.900548\nNaN\n0\n\n\n31\n4\nNon-Trauma\ntriage_wait_begins\nqueue\n37.900548\nNaN\n0\n\n\n32\n4\nNon-Trauma\ntriage_begins\nresource_use\n37.900548\n2.0\n0\n\n\n33\n4\nNon-Trauma\ntriage_complete\nresource_use_end\n37.914164\n2.0\n0\n\n\n34\n4\nNon-Trauma\nMINORS_registration_wait_begins\nqueue\n37.914164\nNaN\n0\n\n\n35\n4\nNon-Trauma\nMINORS_registration_begins\nresource_use\n37.914164\n2.0\n0\n\n\n36\n3\nNon-Trauma\nMINORS_registration_complete\nresource_use_end\n42.359504\n1.0\n0\n\n\n37\n3\nNon-Trauma\nMINORS_examination_wait_begins\nqueue\n42.359504\nNaN\n0\n\n\n38\n3\nNon-Trauma\nMINORS_examination_begins\nresource_use\n42.359504\n3.0\n0\n\n\n39\n4\nNon-Trauma\nMINORS_registration_complete\nresource_use_end\n45.938325\n2.0\n0\n\n\n40\n4\nNon-Trauma\nMINORS_examination_wait_begins\nqueue\n45.938325\nNaN\n0\n\n\n41\n4\nNon-Trauma\nMINORS_examination_begins\nresource_use\n45.938325\n1.0\n0\n\n\n42\n2\nNon-Trauma\nMINORS_treatment_ends\nresource_use_end\n46.278797\n1.0\n0\n\n\n43\n2\nShared\ndepart\narrival_departure\n46.278797\nNaN\n0\n\n\n44\n5\nShared\narrival\narrival_departure\n51.770459\nNaN\n0\n\n\n45\n5\nNon-Trauma\ntriage_wait_begins\nqueue\n51.770459\nNaN\n0\n\n\n46\n5\nNon-Trauma\ntriage_begins\nresource_use\n51.770459\n1.0\n0\n\n\n47\n5\nNon-Trauma\ntriage_complete\nresource_use_end\n55.072516\n1.0\n0\n\n\n48\n5\nNon-Trauma\nMINORS_registration_wait_begins\nqueue\n55.072516\nNaN\n0\n\n\n49\n5\nNon-Trauma\nMINORS_registration_begins\nresource_use\n55.072516\n1.0\n0\n\n\n\n\n\n\n\n\nevent_position_df = pd.DataFrame([\n                # {'event': 'arrival', 'x':  10, 'y': 250, 'label': \"Arrival\" },\n\n                # Triage - minor and trauma\n                {'event': 'triage_wait_begins',\n                 'x':  160, 'y': 375, 'label': \"Waiting for&lt;br&gt;Triage\"  },\n                {'event': 'triage_begins',\n                 'x':  160, 'y': 315, 'resource':'n_triage', 'label': \"Being Triaged\" },\n\n                # Minors (non-trauma) pathway\n                {'event': 'MINORS_registration_wait_begins',\n                 'x':  300, 'y': 145, 'label': \"Waiting for&lt;br&gt;Registration\"  },\n                {'event': 'MINORS_registration_begins',\n                 'x':  300, 'y': 85, 'resource':'n_reg', 'label':'Being&lt;br&gt;Registered'  },\n\n                {'event': 'MINORS_examination_wait_begins',\n                 'x':  465, 'y': 145, 'label': \"Waiting for&lt;br&gt;Examination\"  },\n                {'event': 'MINORS_examination_begins',\n                 'x':  465, 'y': 85, 'resource':'n_exam', 'label': \"Being&lt;br&gt;Examined\" },\n\n                {'event': 'MINORS_treatment_wait_begins',\n                 'x':  630, 'y': 145, 'label': \"Waiting for&lt;br&gt;Treatment\"  },\n                {'event': 'MINORS_treatment_begins',\n                 'x':  630, 'y': 85, 'resource':'n_cubicles_non_trauma_treat', 'label': \"Being&lt;br&gt;Treated\" },\n\n                # Trauma pathway\n                {'event': 'TRAUMA_stabilisation_wait_begins',\n                 'x': 300, 'y': 560, 'label': \"Waiting for&lt;br&gt;Stabilisation\" },\n                {'event': 'TRAUMA_stabilisation_begins',\n                 'x': 300, 'y': 490, 'resource':'n_trauma', 'label': \"Being&lt;br&gt;Stabilised\" },\n\n                {'event': 'TRAUMA_treatment_wait_begins',\n                 'x': 630, 'y': 560, 'label': \"Waiting for&lt;br&gt;Treatment\" },\n                {'event': 'TRAUMA_treatment_begins',\n                 'x': 630, 'y': 490, 'resource':'n_cubicles_trauma_treat', 'label': \"Being&lt;br&gt;Treated\" },\n\n                 {'event': 'exit',\n                 'x':  670, 'y': 330, 'label': \"Exit\"}\n            ])\n\n\nanimate_activity_log(\n        event_log=my_trial.all_event_logs[my_trial.all_event_logs['run']==1],\n        event_position_df= event_position_df,\n        scenario=g(),\n        debug_mode=True,\n        setup_mode=True,\n        every_x_time_units=5,\n        include_play_button=True,\n        gap_between_entities=10,\n        gap_between_rows=20,\n        plotly_height=900,\n        plotly_width=1600,\n        override_x_max=700,\n        override_y_max=675,\n        icon_and_text_size=20,\n        wrap_queues_at=10,\n        step_snapshot_max=50,\n        limit_duration=g.sim_duration,\n        time_display_units=\"dhm\",\n        display_stage_labels=False,\n        add_background_image=\"https://raw.githubusercontent.com/Bergam0t/vidigi/refs/heads/main/examples/example_2_branching_multistep/Full%20Model%20Background%20Image%20-%20Horizontal%20Layout.drawio.png\",\n    )\n\nAnimation function called at 16:09:46\nIteration through minute-by-minute logs complete 16:09:46\nSnapshot df concatenation complete at 16:09:46\nReshaped animation dataframe finished construction at 16:09:46\nPlacement dataframe finished construction at 16:09:46\nOutput animation generation complete at 16:09:47\nTotal Time Elapsed: 1.02 seconds",
    "crumbs": [
      "Examples",
      "Example 2: Branching + Multi-step Case"
    ]
  },
  {
    "objectID": "examples/example_1_simplest_case/ex_1_simplest_case.html",
    "href": "examples/example_1_simplest_case/ex_1_simplest_case.html",
    "title": "Example 1: Simplest Case",
    "section": "",
    "text": "from examples.example_1_simplest_case.ex_1_model_classes import Trial, g\nfrom vidigi.animation import animate_activity_log\nimport pandas as pd\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\n\n\nmy_trial = Trial()\n\nmy_trial.run_trial()\n\n4 nurses\n\n\n\n\nmy_trial.all_event_logs.head(50)\n\n\n\n\n\n\n\n\npatient\npathway\nevent_type\nevent\ntime\nresource_id\nrun\n\n\n\n\n0\n1\nSimplest\narrival_departure\narrival\n0.000000\nNaN\n0\n\n\n1\n1\nSimplest\nqueue\ntreatment_wait_begins\n0.000000\nNaN\n0\n\n\n2\n1\nSimplest\nresource_use\ntreatment_begins\n0.000000\n1.0\n0\n\n\n3\n2\nSimplest\narrival_departure\narrival\n3.399660\nNaN\n0\n\n\n4\n2\nSimplest\nqueue\ntreatment_wait_begins\n3.399660\nNaN\n0\n\n\n5\n2\nSimplest\nresource_use\ntreatment_begins\n3.399660\n2.0\n0\n\n\n6\n3\nSimplest\narrival_departure\narrival\n8.497645\nNaN\n0\n\n\n7\n3\nSimplest\nqueue\ntreatment_wait_begins\n8.497645\nNaN\n0\n\n\n8\n3\nSimplest\nresource_use\ntreatment_begins\n8.497645\n3.0\n0\n\n\n9\n4\nSimplest\narrival_departure\narrival\n8.596678\nNaN\n0\n\n\n10\n4\nSimplest\nqueue\ntreatment_wait_begins\n8.596678\nNaN\n0\n\n\n11\n4\nSimplest\nresource_use\ntreatment_begins\n8.596678\n4.0\n0\n\n\n12\n5\nSimplest\narrival_departure\narrival\n8.608025\nNaN\n0\n\n\n13\n5\nSimplest\nqueue\ntreatment_wait_begins\n8.608025\nNaN\n0\n\n\n14\n6\nSimplest\narrival_departure\narrival\n11.359739\nNaN\n0\n\n\n15\n6\nSimplest\nqueue\ntreatment_wait_begins\n11.359739\nNaN\n0\n\n\n16\n7\nSimplest\narrival_departure\narrival\n19.509442\nNaN\n0\n\n\n17\n7\nSimplest\nqueue\ntreatment_wait_begins\n19.509442\nNaN\n0\n\n\n18\n8\nSimplest\narrival_departure\narrival\n22.877356\nNaN\n0\n\n\n19\n8\nSimplest\nqueue\ntreatment_wait_begins\n22.877356\nNaN\n0\n\n\n20\n9\nSimplest\narrival_departure\narrival\n26.653863\nNaN\n0\n\n\n21\n9\nSimplest\nqueue\ntreatment_wait_begins\n26.653863\nNaN\n0\n\n\n22\n1\nSimplest\nresource_use_end\ntreatment_complete\n40.317385\n1.0\n0\n\n\n23\n1\nSimplest\narrival_departure\ndepart\n40.317385\nNaN\n0\n\n\n24\n5\nSimplest\nresource_use\ntreatment_begins\n40.317385\n1.0\n0\n\n\n25\n10\nSimplest\narrival_departure\narrival\n40.737793\nNaN\n0\n\n\n26\n10\nSimplest\nqueue\ntreatment_wait_begins\n40.737793\nNaN\n0\n\n\n27\n2\nSimplest\nresource_use_end\ntreatment_complete\n42.443230\n2.0\n0\n\n\n28\n2\nSimplest\narrival_departure\ndepart\n42.443230\nNaN\n0\n\n\n29\n6\nSimplest\nresource_use\ntreatment_begins\n42.443230\n2.0\n0\n\n\n30\n4\nSimplest\nresource_use_end\ntreatment_complete\n48.809628\n4.0\n0\n\n\n31\n4\nSimplest\narrival_departure\ndepart\n48.809628\nNaN\n0\n\n\n32\n7\nSimplest\nresource_use\ntreatment_begins\n48.809628\n4.0\n0\n\n\n33\n3\nSimplest\nresource_use_end\ntreatment_complete\n51.483457\n3.0\n0\n\n\n34\n3\nSimplest\narrival_departure\ndepart\n51.483457\nNaN\n0\n\n\n35\n8\nSimplest\nresource_use\ntreatment_begins\n51.483457\n3.0\n0\n\n\n36\n11\nSimplest\narrival_departure\narrival\n71.026558\nNaN\n0\n\n\n37\n11\nSimplest\nqueue\ntreatment_wait_begins\n71.026558\nNaN\n0\n\n\n38\n5\nSimplest\nresource_use_end\ntreatment_complete\n77.447488\n1.0\n0\n\n\n39\n5\nSimplest\narrival_departure\ndepart\n77.447488\nNaN\n0\n\n\n40\n9\nSimplest\nresource_use\ntreatment_begins\n77.447488\n1.0\n0\n\n\n41\n6\nSimplest\nresource_use_end\ntreatment_complete\n83.962251\n2.0\n0\n\n\n42\n6\nSimplest\narrival_departure\ndepart\n83.962251\nNaN\n0\n\n\n43\n10\nSimplest\nresource_use\ntreatment_begins\n83.962251\n2.0\n0\n\n\n44\n12\nSimplest\narrival_departure\narrival\n87.458700\nNaN\n0\n\n\n45\n12\nSimplest\nqueue\ntreatment_wait_begins\n87.458700\nNaN\n0\n\n\n46\n13\nSimplest\narrival_departure\narrival\n87.465138\nNaN\n0\n\n\n47\n13\nSimplest\nqueue\ntreatment_wait_begins\n87.465138\nNaN\n0\n\n\n48\n7\nSimplest\nresource_use_end\ntreatment_complete\n95.498040\n4.0\n0\n\n\n49\n7\nSimplest\narrival_departure\ndepart\n95.498040\nNaN\n0\n\n\n\n\n\n\n\n\nevent_position_df = pd.DataFrame([\n                    {'event': 'arrival',\n                     'x':  50, 'y': 300,\n                     'label': \"Arrival\" },\n\n                    # Triage - minor and trauma\n                    {'event': 'treatment_wait_begins',\n                     'x':  205, 'y': 275,\n                     'label': \"Waiting for Treatment\"},\n\n                    {'event': 'treatment_begins',\n                     'x':  205, 'y': 175,\n                     'resource':'n_cubicles',\n                     'label': \"Being Treated\"},\n\n                    {'event': 'exit',\n                     'x':  270, 'y': 70,\n                     'label': \"Exit\"}\n\n                ])\n\n\nanimate_activity_log(\n        event_log=my_trial.all_event_logs[my_trial.all_event_logs['run']==1],\n        event_position_df= event_position_df,\n        scenario=g(),\n        debug_mode=True,\n        setup_mode=False,\n        every_x_time_units=1,\n        include_play_button=True,\n        icon_and_text_size=20,\n        gap_between_entities=6,\n        gap_between_rows=25,\n        plotly_height=700,\n        frame_duration=200,\n        plotly_width=1200,\n        override_x_max=300,\n        override_y_max=500,\n        limit_duration=g.sim_duration,\n        wrap_queues_at=25,\n        step_snapshot_max=125,\n        time_display_units=\"dhm\",\n        display_stage_labels=False,\n        add_background_image=\"https://raw.githubusercontent.com/Bergam0t/vidigi/refs/heads/main/examples/example_1_simplest_case/Simplest%20Model%20Background%20Image%20-%20Horizontal%20Layout.drawio.png\",\n    )\n\nAnimation function called at 15:26:20\nIteration through minute-by-minute logs complete 15:26:23\nSnapshot df concatenation complete at 15:26:23\nReshaped animation dataframe finished construction at 15:26:23\nPlacement dataframe finished construction at 15:26:23\nOutput animation generation complete at 15:26:25\nTotal Time Elapsed: 4.85 seconds",
    "crumbs": [
      "Examples",
      "Example 1: Simplest Case"
    ]
  },
  {
    "objectID": "examples/example_3_simplest_case_priority_resource/ex_3_simplest_case_priority_resource.html",
    "href": "examples/example_3_simplest_case_priority_resource/ex_3_simplest_case_priority_resource.html",
    "title": "Example 3: Simplest Case - with a Priority Resource",
    "section": "",
    "text": "from examples.example_3_simplest_case_priority_resource.ex_3_model_classes import Trial, g\nfrom vidigi.prep import reshape_for_animations, generate_animation_df\nfrom vidigi.animation import generate_animation\nfrom vidigi.animation import animate_activity_log\nimport pandas as pd\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\n\n\nmy_trial = Trial()\n\nmy_trial.run_trial()\n\n4 nurses\n\n\n\n\nmy_trial.all_event_logs.head(50)\n\n\n\n\n\n\n\n\npatient\npathway\nevent_type\nevent\ntime\nresource_id\nrun\n\n\n\n\n0\n1\n2\narrival_departure\narrival\n0.000000\nNaN\n0\n\n\n1\n1\n2\nqueue\ntreatment_wait_begins\n0.000000\nNaN\n0\n\n\n2\n1\n2\nresource_use\ntreatment_begins\n0.000000\n1.0\n0\n\n\n3\n2\n2\narrival_departure\narrival\n3.399660\nNaN\n0\n\n\n4\n2\n2\nqueue\ntreatment_wait_begins\n3.399660\nNaN\n0\n\n\n5\n2\n2\nresource_use\ntreatment_begins\n3.399660\n2.0\n0\n\n\n6\n3\n2\narrival_departure\narrival\n8.497645\nNaN\n0\n\n\n7\n3\n2\nqueue\ntreatment_wait_begins\n8.497645\nNaN\n0\n\n\n8\n3\n2\nresource_use\ntreatment_begins\n8.497645\n3.0\n0\n\n\n9\n4\n2\narrival_departure\narrival\n8.596678\nNaN\n0\n\n\n10\n4\n2\nqueue\ntreatment_wait_begins\n8.596678\nNaN\n0\n\n\n11\n4\n2\nresource_use\ntreatment_begins\n8.596678\n4.0\n0\n\n\n12\n5\n2\narrival_departure\narrival\n8.608025\nNaN\n0\n\n\n13\n5\n2\nqueue\ntreatment_wait_begins\n8.608025\nNaN\n0\n\n\n14\n6\n2\narrival_departure\narrival\n11.359739\nNaN\n0\n\n\n15\n6\n2\nqueue\ntreatment_wait_begins\n11.359739\nNaN\n0\n\n\n16\n7\n2\narrival_departure\narrival\n19.509442\nNaN\n0\n\n\n17\n7\n2\nqueue\ntreatment_wait_begins\n19.509442\nNaN\n0\n\n\n18\n8\n2\narrival_departure\narrival\n22.877356\nNaN\n0\n\n\n19\n8\n2\nqueue\ntreatment_wait_begins\n22.877356\nNaN\n0\n\n\n20\n9\n2\narrival_departure\narrival\n26.653863\nNaN\n0\n\n\n21\n9\n2\nqueue\ntreatment_wait_begins\n26.653863\nNaN\n0\n\n\n22\n1\n2\nresource_use_end\ntreatment_complete\n40.317385\n1.0\n0\n\n\n23\n1\n2\narrival_departure\ndepart\n40.317385\nNaN\n0\n\n\n24\n5\n2\nresource_use\ntreatment_begins\n40.317385\n1.0\n0\n\n\n25\n10\n2\narrival_departure\narrival\n40.737793\nNaN\n0\n\n\n26\n10\n2\nqueue\ntreatment_wait_begins\n40.737793\nNaN\n0\n\n\n27\n2\n2\nresource_use_end\ntreatment_complete\n42.443230\n2.0\n0\n\n\n28\n2\n2\narrival_departure\ndepart\n42.443230\nNaN\n0\n\n\n29\n6\n2\nresource_use\ntreatment_begins\n42.443230\n2.0\n0\n\n\n30\n4\n2\nresource_use_end\ntreatment_complete\n48.809628\n4.0\n0\n\n\n31\n4\n2\narrival_departure\ndepart\n48.809628\nNaN\n0\n\n\n32\n7\n2\nresource_use\ntreatment_begins\n48.809628\n4.0\n0\n\n\n33\n3\n2\nresource_use_end\ntreatment_complete\n51.483457\n3.0\n0\n\n\n34\n3\n2\narrival_departure\ndepart\n51.483457\nNaN\n0\n\n\n35\n8\n2\nresource_use\ntreatment_begins\n51.483457\n3.0\n0\n\n\n36\n11\n2\narrival_departure\narrival\n71.026558\nNaN\n0\n\n\n37\n11\n2\nqueue\ntreatment_wait_begins\n71.026558\nNaN\n0\n\n\n38\n5\n2\nresource_use_end\ntreatment_complete\n77.447488\n1.0\n0\n\n\n39\n5\n2\narrival_departure\ndepart\n77.447488\nNaN\n0\n\n\n40\n9\n2\nresource_use\ntreatment_begins\n77.447488\n1.0\n0\n\n\n41\n6\n2\nresource_use_end\ntreatment_complete\n83.962251\n2.0\n0\n\n\n42\n6\n2\narrival_departure\ndepart\n83.962251\nNaN\n0\n\n\n43\n10\n2\nresource_use\ntreatment_begins\n83.962251\n2.0\n0\n\n\n44\n12\n2\narrival_departure\narrival\n87.458700\nNaN\n0\n\n\n45\n12\n2\nqueue\ntreatment_wait_begins\n87.458700\nNaN\n0\n\n\n46\n13\n2\narrival_departure\narrival\n87.465138\nNaN\n0\n\n\n47\n13\n2\nqueue\ntreatment_wait_begins\n87.465138\nNaN\n0\n\n\n48\n7\n2\nresource_use_end\ntreatment_complete\n95.498040\n4.0\n0\n\n\n49\n7\n2\narrival_departure\ndepart\n95.498040\nNaN\n0\n\n\n\n\n\n\n\n\nSTEP_SNAPSHOT_MAX = 45\nLIMIT_DURATION = g.sim_duration\nWRAP_QUEUES_AT = 15\n\n\nfull_patient_df = reshape_for_animations(\n    event_log=my_trial.all_event_logs[my_trial.all_event_logs['run']==1],\n    every_x_time_units=2,\n    step_snapshot_max=STEP_SNAPSHOT_MAX,\n    limit_duration=LIMIT_DURATION,\n    debug_mode=True\n    )\nfull_patient_df.head(15)\n\nIteration through minute-by-minute logs complete 10:21:51\nSnapshot df concatenation complete at 10:21:51\n\n\n\n\n\n\n\n\n\nindex\npatient\npathway\nevent_type\nevent\ntime\nresource_id\nrun\nrank\nminute\nadditional\n\n\n\n\n0\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n0\nNaN\n\n\n1\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n2\nNaN\n\n\n2\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n4\nNaN\n\n\n3\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n6\nNaN\n\n\n4\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n8\nNaN\n\n\n5\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n10\nNaN\n\n\n6\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n12\nNaN\n\n\n7\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n14\nNaN\n\n\n8\n5\n2\n2\nresource_use\ntreatment_begins\n12.021043\n2.0\n1\n2.0\n14\nNaN\n\n\n9\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n16\nNaN\n\n\n10\n5\n2\n2\nresource_use\ntreatment_begins\n12.021043\n2.0\n1\n2.0\n16\nNaN\n\n\n11\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n18\nNaN\n\n\n12\n5\n2\n2\nresource_use\ntreatment_begins\n12.021043\n2.0\n1\n2.0\n18\nNaN\n\n\n13\n2\n1\n1\nresource_use\ntreatment_begins\n0.000000\n1.0\n1\n1.0\n20\nNaN\n\n\n14\n5\n2\n2\nresource_use\ntreatment_begins\n12.021043\n2.0\n1\n2.0\n20\nNaN\n\n\n\n\n\n\n\n\nevent_position_df = pd.DataFrame([\n                    {'event': 'arrival',\n                     'x':  50, 'y': 300,\n                     'label': \"Arrival\" },\n\n                    # Triage - minor and trauma\n                    {'event': 'treatment_wait_begins',\n                     'x':  205, 'y': 275,\n                     'label': \"Waiting for Treatment\"},\n\n                    {'event': 'treatment_begins',\n                     'x':  205, 'y': 175,\n                     'resource':'n_cubicles',\n                     'label': \"Being Treated\"},\n\n                    {'event': 'exit',\n                     'x':  270, 'y': 70,\n                     'label': \"Exit\"}\n\n                ])\n\n\nfull_patient_df_plus_pos = generate_animation_df(full_patient_df=full_patient_df,\n                                                 event_position_df=event_position_df,\n                                                 wrap_queues_at=WRAP_QUEUES_AT,\n                                                 step_snapshot_max=STEP_SNAPSHOT_MAX,\n                                                 gap_between_entities=10,\n                                                 gap_between_resources=10,\n                                                 gap_between_rows=30,\n                                                 debug_mode=True\n                                                 )\n\nfull_patient_df_plus_pos.sort_values(['patient', 'minute']).head(15)\n\nPlacement dataframe finished construction at 10:21:51\n\n\n\n\n\n\n\n\n\nindex\npatient\npathway\nevent_type\nevent\ntime\nresource_id\nrun\nrank\nminute\nadditional\nx\ny_final\nlabel\nresource\nx_final\nrow\nicon\n\n\n\n\n10186\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n0\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10187\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n2\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10188\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n4\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10189\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n6\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10190\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n8\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10191\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n10\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10192\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n12\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10193\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n14\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10194\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n16\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10195\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n18\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10196\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n20\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10197\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n22\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10198\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n24\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10199\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n26\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n10200\n2\n1\n1\nresource_use\ntreatment_begins\n0.0\n1.0\n1\n1.0\n28\nNaN\n205\n175.0\nBeing Treated\nn_cubicles\n195.0\nNaN\n🧔🏼\n\n\n\n\n\n\n\n\ndef show_priority_icon(row):\n            if \"more\" not in row[\"icon\"]:\n                if row[\"pathway\"] == 1:\n                        return \"🚨\"\n                else:\n                    return row[\"icon\"]\n            else:\n                return row[\"icon\"]\n\n\nfull_patient_df_plus_pos = full_patient_df_plus_pos.assign(\n            icon=full_patient_df_plus_pos.apply(show_priority_icon, axis=1)\n            )\n\n\nfull_patient_df_plus_pos.head(15)\n\n\n\n\n\n\n\n\nindex\npatient\npathway\nevent_type\nevent\ntime\nresource_id\nrun\nrank\nminute\nadditional\nx\ny_final\nlabel\nresource\nx_final\nrow\nicon\n\n\n\n\n0\n155\n49\n2\nqueue\nexit\n206.540636\nNaN\n1\n3.0\n600\nNaN\n270\n70.0\nExit\nNaN\n250.0\n0.0\n🧕🏾\n\n\n1\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n208\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n2\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n210\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n3\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n212\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n4\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n214\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n5\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n216\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n6\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n218\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n7\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n220\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n8\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n222\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n9\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n224\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n10\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n226\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n11\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n228\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n12\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n230\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n13\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n27.0\n232\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n95.0\n1.0\n🧕🏾\n\n\n14\n155\n49\n2\nqueue\ntreatment_wait_begins\n206.540636\nNaN\n1\n26.0\n234\nNaN\n205\n305.0\nWaiting for Treatment\nNaN\n105.0\n1.0\n🧕🏾\n\n\n\n\n\n\n\n\ngenerate_animation(\n        full_patient_df_plus_pos=full_patient_df_plus_pos.sort_values(['patient', 'minute']),\n        event_position_df= event_position_df,\n        scenario=g(),\n        debug_mode=True,\n        setup_mode=False,\n        include_play_button=True,\n        icon_and_text_size=20,\n        plotly_height=700,\n        frame_duration=800,\n        frame_transition_duration=200,\n        plotly_width=1200,\n        override_x_max=300,\n        override_y_max=500,\n        time_display_units=\"dhm\",\n        display_stage_labels=False,\n        add_background_image=\"https://raw.githubusercontent.com/Bergam0t/vidigi/refs/heads/main/examples/example_1_simplest_case/Simplest%20Model%20Background%20Image%20-%20Horizontal%20Layout.drawio.png\",\n    )\n\nOutput animation generation complete at 10:21:52\n\n\n                                                \n\n\n\nanimate_activity_log(\n        event_log=my_trial.all_event_logs[my_trial.all_event_logs['run']==1],\n        event_position_df= event_position_df,\n        scenario=g(),\n        debug_mode=True,\n        setup_mode=False,\n        every_x_time_units=1,\n        include_play_button=True,\n        icon_and_text_size=20,\n        gap_between_entities=6,\n        gap_between_rows=25,\n        plotly_height=700,\n        frame_duration=200,\n        plotly_width=1200,\n        override_x_max=300,\n        override_y_max=500,\n        limit_duration=g.sim_duration,\n        wrap_queues_at=25,\n        step_snapshot_max=125,\n        time_display_units=\"dhm\",\n        display_stage_labels=False,\n        add_background_image=\"https://raw.githubusercontent.com/Bergam0t/vidigi/refs/heads/main/examples/example_1_simplest_case/Simplest%20Model%20Background%20Image%20-%20Horizontal%20Layout.drawio.png\",\n    )\n\nAnimation function called at 10:23:11\nIteration through minute-by-minute logs complete 10:23:13\nSnapshot df concatenation complete at 10:23:14\nReshaped animation dataframe finished construction at 10:23:14\nPlacement dataframe finished construction at 10:23:14\nOutput animation generation complete at 10:23:16\nTotal Time Elapsed: 4.24 seconds",
    "crumbs": [
      "Examples",
      "Example 3: Simplest Case - with a Priority Resource"
    ]
  },
  {
    "objectID": "examples/example_4_ciw/notes.html",
    "href": "examples/example_4_ciw/notes.html",
    "title": "",
    "section": "",
    "text": "This is adapted from the following repository: Monks, T., Harper, A., & Heather, A. (2023). Towards Sharing Tools, Artefacts, and Reproducible Simulation: a ciw model example (v1.0.1). Zenodo. https://doi.org/10.5281/zenodo.10051494\nSee here for the adaptation embedded within that repo: https://github.com/Bergam0t/ciw-example-animation/tree/main\nPlease also note this model runs ciw 2.x\nIt will not run with 3.x - but could theoretically be adapted to do so"
  },
  {
    "objectID": "reference/animation.animate_activity_log.html",
    "href": "reference/animation.animate_activity_log.html",
    "title": "animation.animate_activity_log",
    "section": "",
    "text": "animation.animate_activity_log(\n    event_log,\n    event_position_df,\n    scenario=None,\n    every_x_time_units=10,\n    wrap_queues_at=20,\n    step_snapshot_max=50,\n    limit_duration=10 * 60 * 24,\n    plotly_height=900,\n    plotly_width=None,\n    include_play_button=True,\n    add_background_image=None,\n    display_stage_labels=True,\n    icon_and_text_size=24,\n    gap_between_entities=10,\n    gap_between_rows=30,\n    gap_between_resources=10,\n    resource_opacity=0.8,\n    custom_resource_icon=None,\n    override_x_max=None,\n    override_y_max=None,\n    time_display_units=None,\n    setup_mode=False,\n    frame_duration=400,\n    frame_transition_duration=600,\n    debug_mode=False,\n    custom_entity_icon_list=None,\n)\nGenerate an animated visualization of patient flow through a system.\nThis function processes event log data, adds positional information, and creates an interactive Plotly animation representing patient movement through various stages.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevent_log\npd.DataFrame\nThe log of events to be animated, containing patient activities.\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame specifying the positions of different events, with columns ‘event’, ‘x’, and ‘y’.\nrequired\n\n\nscenario\nobject\nAn object containing attributes for resource counts at different steps.\nNone\n\n\nevery_x_time_units\nint\nTime interval between animation frames in minutes (default is 10).\n10\n\n\nwrap_queues_at\nint\nMaximum number of entities to display in a queue before wrapping to a new row (default is 20).\n20\n\n\nstep_snapshot_max\nint\nMaximum number of patients to show in each snapshot per event (default is 50).\n50\n\n\nlimit_duration\nint\nMaximum duration to animate in minutes (default is 10 days or 14400 minutes).\n10 * 60 * 24\n\n\nplotly_height\nint\nHeight of the Plotly figure in pixels (default is 900).\n900\n\n\nplotly_width\nint\nWidth of the Plotly figure in pixels (default is None, which auto-adjusts).\nNone\n\n\ninclude_play_button\nbool\nWhether to include a play button in the animation (default is True).\nTrue\n\n\nadd_background_image\nstr\nPath to a background image file to add to the animation (default is None).\nNone\n\n\ndisplay_stage_labels\nbool\nWhether to display labels for each stage (default is True).\nTrue\n\n\nicon_and_text_size\nint\nSize of icons and text in the animation (default is 24).\n24\n\n\ngap_between_entities\nint\nHorizontal spacing between entities in pixels (default is 10).\n10\n\n\ngap_between_rows\nint\nVertical spacing between rows in pixels (default is 30).\n30\n\n\ngap_between_resources\nint\nHorizontal spacing between resources in pixels (default is 10).\n10\n\n\nresource_opacity\nfloat\nOpacity of resource icons (default is 0.8).\n0.8\n\n\ncustom_resource_icon\nstr\nCustom icon to use for resources (default is None).\nNone\n\n\noverride_x_max\nint\nOverride the maximum x-coordinate of the plot (default is None).\nNone\n\n\noverride_y_max\nint\nOverride the maximum y-coordinate of the plot (default is None).\nNone\n\n\ntime_display_units\nstr\nUnits for displaying time. Options are ‘dhm’ (days, hours, minutes), ‘d’ (days), or None (default).\nNone\n\n\nsetup_mode\nbool\nIf True, display grid and tick marks for initial setup (default is False).\nFalse\n\n\nframe_duration\nint\nDuration of each frame in milliseconds (default is 400).\n400\n\n\nframe_transition_duration\nint\nDuration of transition between frames in milliseconds (default is 600).\n600\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse\n\n\ncustom_entity_icon_list\n\nIf given, overrides the default list of emojis used to represent entities\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nplotly.graph_objs._figure.Figure\nAn animated Plotly figure object representing the patient flow.\n\n\n\n\n\n\n\nThis function uses helper functions: reshape_for_animations, generate_animation_df, and generate_animation.\nThe animation supports customization of icon sizes, resource representation, and animation speed.\nTime can be displayed as actual dates or as model time units.\nA background image can be added to provide context for the patient flow.\nThe function handles both queuing and resource use events.\n\n\n\n\n&gt;&gt;&gt; animation = animate_activity_log(event_log, event_positions, scenario,\n...                                  time_display_units='dhm',\n...                                  add_background_image='path/to/image.png')\n&gt;&gt;&gt; animation.show()",
    "crumbs": [
      "Reference",
      "All-In-One Animation Functions",
      "animation.animate_activity_log"
    ]
  },
  {
    "objectID": "reference/animation.animate_activity_log.html#parameters",
    "href": "reference/animation.animate_activity_log.html#parameters",
    "title": "animation.animate_activity_log",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nevent_log\npd.DataFrame\nThe log of events to be animated, containing patient activities.\nrequired\n\n\nevent_position_df\npd.DataFrame\nDataFrame specifying the positions of different events, with columns ‘event’, ‘x’, and ‘y’.\nrequired\n\n\nscenario\nobject\nAn object containing attributes for resource counts at different steps.\nNone\n\n\nevery_x_time_units\nint\nTime interval between animation frames in minutes (default is 10).\n10\n\n\nwrap_queues_at\nint\nMaximum number of entities to display in a queue before wrapping to a new row (default is 20).\n20\n\n\nstep_snapshot_max\nint\nMaximum number of patients to show in each snapshot per event (default is 50).\n50\n\n\nlimit_duration\nint\nMaximum duration to animate in minutes (default is 10 days or 14400 minutes).\n10 * 60 * 24\n\n\nplotly_height\nint\nHeight of the Plotly figure in pixels (default is 900).\n900\n\n\nplotly_width\nint\nWidth of the Plotly figure in pixels (default is None, which auto-adjusts).\nNone\n\n\ninclude_play_button\nbool\nWhether to include a play button in the animation (default is True).\nTrue\n\n\nadd_background_image\nstr\nPath to a background image file to add to the animation (default is None).\nNone\n\n\ndisplay_stage_labels\nbool\nWhether to display labels for each stage (default is True).\nTrue\n\n\nicon_and_text_size\nint\nSize of icons and text in the animation (default is 24).\n24\n\n\ngap_between_entities\nint\nHorizontal spacing between entities in pixels (default is 10).\n10\n\n\ngap_between_rows\nint\nVertical spacing between rows in pixels (default is 30).\n30\n\n\ngap_between_resources\nint\nHorizontal spacing between resources in pixels (default is 10).\n10\n\n\nresource_opacity\nfloat\nOpacity of resource icons (default is 0.8).\n0.8\n\n\ncustom_resource_icon\nstr\nCustom icon to use for resources (default is None).\nNone\n\n\noverride_x_max\nint\nOverride the maximum x-coordinate of the plot (default is None).\nNone\n\n\noverride_y_max\nint\nOverride the maximum y-coordinate of the plot (default is None).\nNone\n\n\ntime_display_units\nstr\nUnits for displaying time. Options are ‘dhm’ (days, hours, minutes), ‘d’ (days), or None (default).\nNone\n\n\nsetup_mode\nbool\nIf True, display grid and tick marks for initial setup (default is False).\nFalse\n\n\nframe_duration\nint\nDuration of each frame in milliseconds (default is 400).\n400\n\n\nframe_transition_duration\nint\nDuration of transition between frames in milliseconds (default is 600).\n600\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse\n\n\ncustom_entity_icon_list\n\nIf given, overrides the default list of emojis used to represent entities\nNone",
    "crumbs": [
      "Reference",
      "All-In-One Animation Functions",
      "animation.animate_activity_log"
    ]
  },
  {
    "objectID": "reference/animation.animate_activity_log.html#returns",
    "href": "reference/animation.animate_activity_log.html#returns",
    "title": "animation.animate_activity_log",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nplotly.graph_objs._figure.Figure\nAn animated Plotly figure object representing the patient flow.",
    "crumbs": [
      "Reference",
      "All-In-One Animation Functions",
      "animation.animate_activity_log"
    ]
  },
  {
    "objectID": "reference/animation.animate_activity_log.html#notes",
    "href": "reference/animation.animate_activity_log.html#notes",
    "title": "animation.animate_activity_log",
    "section": "",
    "text": "This function uses helper functions: reshape_for_animations, generate_animation_df, and generate_animation.\nThe animation supports customization of icon sizes, resource representation, and animation speed.\nTime can be displayed as actual dates or as model time units.\nA background image can be added to provide context for the patient flow.\nThe function handles both queuing and resource use events.",
    "crumbs": [
      "Reference",
      "All-In-One Animation Functions",
      "animation.animate_activity_log"
    ]
  },
  {
    "objectID": "reference/animation.animate_activity_log.html#examples",
    "href": "reference/animation.animate_activity_log.html#examples",
    "title": "animation.animate_activity_log",
    "section": "",
    "text": "&gt;&gt;&gt; animation = animate_activity_log(event_log, event_positions, scenario,\n...                                  time_display_units='dhm',\n...                                  add_background_image='path/to/image.png')\n&gt;&gt;&gt; animation.show()",
    "crumbs": [
      "Reference",
      "All-In-One Animation Functions",
      "animation.animate_activity_log"
    ]
  },
  {
    "objectID": "reference/index.html#all-in-one-animation-functions",
    "href": "reference/index.html#all-in-one-animation-functions",
    "title": "All Functions",
    "section": "All-In-One Animation Functions",
    "text": "All-In-One Animation Functions\n\n\n\nanimation.animate_activity_log\nGenerate an animated visualization of patient flow through a system.",
    "crumbs": [
      "Reference",
      "All Functions"
    ]
  },
  {
    "objectID": "reference/index.html#step-by-step-functions",
    "href": "reference/index.html#step-by-step-functions",
    "title": "All Functions",
    "section": "Step-By-Step Functions",
    "text": "Step-By-Step Functions\n\n\n\nprep.reshape_for_animations\nReshape event log data for animation purposes.\n\n\nprep.generate_animation_df\nGenerate a DataFrame for animation purposes by adding position information to patient data.\n\n\nanimation.generate_animation\nGenerate an animated visualization of patient flow through a system.",
    "crumbs": [
      "Reference",
      "All Functions"
    ]
  },
  {
    "objectID": "reference/index.html#simpy-utility-functions-and-classes",
    "href": "reference/index.html#simpy-utility-functions-and-classes",
    "title": "All Functions",
    "section": "Simpy Utility Functions and Classes",
    "text": "Simpy Utility Functions and Classes\n\n\n\nutils.populate_store\nPopulate a SimPy Store (or VidigiPriorityStore) with CustomResource objects.\n\n\nutils.CustomResource\nA custom resource class that extends simpy.Resource with an additional ID attribute.\n\n\nutils.VidigiPriorityStore\nA SimPy store that processes requests with priority.",
    "crumbs": [
      "Reference",
      "All Functions"
    ]
  },
  {
    "objectID": "reference/index.html#ciw-utility-functions",
    "href": "reference/index.html#ciw-utility-functions",
    "title": "All Functions",
    "section": "ciw Utility Functions",
    "text": "ciw Utility Functions\n\n\n\nutils.event_log_from_ciw_recs\nGiven the ciw recs object, return a dataframe in the format expected by the vidigi",
    "crumbs": [
      "Reference",
      "All Functions"
    ]
  },
  {
    "objectID": "reference/prep.reshape_for_animations.html",
    "href": "reference/prep.reshape_for_animations.html",
    "title": "prep.reshape_for_animations",
    "section": "",
    "text": "prep.reshape_for_animations(\n    event_log,\n    every_x_time_units=10,\n    limit_duration=10 * 60 * 24,\n    step_snapshot_max=50,\n    debug_mode=False,\n)\nReshape event log data for animation purposes.\nThis function processes an event log to create a series of snapshots at regular time intervals, suitable for creating animations of patient flow through a system.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevent_log\npd.DataFrame\nThe input event log containing patient events and timestamps.\nrequired\n\n\nevery_x_time_units\nint\nThe time interval between snapshots in minutes (default is 10).\n10\n\n\nlimit_duration\nint\nThe maximum duration to consider in minutes (default is 10 days).\n10 * 60 * 24\n\n\nstep_snapshot_max\nint\nThe maximum number of patients to include in each snapshot for each event (default is 50).\n50\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nA reshaped DataFrame containing snapshots of patient positions at regular time intervals, sorted by minute and event.\n\n\n\n\n\n\n\nThe function creates snapshots of patient positions at specified time intervals.\nIt handles patients who are present in the system at each snapshot time.\nPatients are ranked within each event based on their arrival order.\nA maximum number of patients per event can be set to limit the number of patients who will be displayed on screen within any one event type at a time.\nAn ‘exit’ event is added for each patient at the end of their journey.\nThe function uses memory management techniques (del and gc.collect()) to handle large datasets.\n\n\n\n\n\nAdd behavior for when limit_duration is None.\nConsider adding ‘first step’ and ‘last step’ parameters.\nImplement pathway order and precedence columns.\nFix the automatic exit at the end of the simulation run for all patients.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.reshape_for_animations"
    ]
  },
  {
    "objectID": "reference/prep.reshape_for_animations.html#parameters",
    "href": "reference/prep.reshape_for_animations.html#parameters",
    "title": "prep.reshape_for_animations",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nevent_log\npd.DataFrame\nThe input event log containing patient events and timestamps.\nrequired\n\n\nevery_x_time_units\nint\nThe time interval between snapshots in minutes (default is 10).\n10\n\n\nlimit_duration\nint\nThe maximum duration to consider in minutes (default is 10 days).\n10 * 60 * 24\n\n\nstep_snapshot_max\nint\nThe maximum number of patients to include in each snapshot for each event (default is 50).\n50\n\n\ndebug_mode\nbool\nIf True, print debug information during processing (default is False).\nFalse",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.reshape_for_animations"
    ]
  },
  {
    "objectID": "reference/prep.reshape_for_animations.html#returns",
    "href": "reference/prep.reshape_for_animations.html#returns",
    "title": "prep.reshape_for_animations",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nA reshaped DataFrame containing snapshots of patient positions at regular time intervals, sorted by minute and event.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.reshape_for_animations"
    ]
  },
  {
    "objectID": "reference/prep.reshape_for_animations.html#notes",
    "href": "reference/prep.reshape_for_animations.html#notes",
    "title": "prep.reshape_for_animations",
    "section": "",
    "text": "The function creates snapshots of patient positions at specified time intervals.\nIt handles patients who are present in the system at each snapshot time.\nPatients are ranked within each event based on their arrival order.\nA maximum number of patients per event can be set to limit the number of patients who will be displayed on screen within any one event type at a time.\nAn ‘exit’ event is added for each patient at the end of their journey.\nThe function uses memory management techniques (del and gc.collect()) to handle large datasets.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.reshape_for_animations"
    ]
  },
  {
    "objectID": "reference/prep.reshape_for_animations.html#todo",
    "href": "reference/prep.reshape_for_animations.html#todo",
    "title": "prep.reshape_for_animations",
    "section": "",
    "text": "Add behavior for when limit_duration is None.\nConsider adding ‘first step’ and ‘last step’ parameters.\nImplement pathway order and precedence columns.\nFix the automatic exit at the end of the simulation run for all patients.",
    "crumbs": [
      "Reference",
      "Step-By-Step Functions",
      "prep.reshape_for_animations"
    ]
  },
  {
    "objectID": "reference/utils.event_log_from_ciw_recs.html",
    "href": "reference/utils.event_log_from_ciw_recs.html",
    "title": "utils.event_log_from_ciw_recs",
    "section": "",
    "text": "utils.event_log_from_ciw_recs(ciw_recs_obj, node_name_list)\nGiven the ciw recs object, return a dataframe in the format expected by the vidigi functions - reshape_for_animation OR - animate_activity_log\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nciw_recs_obj\n\nThe output of the .get_all_records() method run on the ciw simulation object. This is a list of named tuples. See https://ciw.readthedocs.io/en/latest/Tutorial/GettingStarted/part_3.html and https://ciw.readthedocs.io/en/latest/Reference/results.html for more details.\nrequired\n\n\nnode_name_list\n\nUser-defined list of strings where each string relates to the resource or activity that will take place at that ciw node\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\n\n\n\n\n\n\n\nGiven the ciw recs object, if we know the nodes and what they relate to, we can build up a picture the arrival date for the first tuple for a given user ID is the arrival\nThen, for each node: - the arrival date for a given node is when they start queueing - the service start date is when they stop queueing - the service start date is when they begin using the resource - the service end date is when the resource use ends - the server ID is the equivalent of a simpy resource use ID\nA more complex multi-node example can be found in https://github.com/Bergam0t/ciw-example-animation in the files - ciw_model.py - vidigi_experiments.py",
    "crumbs": [
      "Reference",
      "ciw Utility Functions",
      "utils.event_log_from_ciw_recs"
    ]
  },
  {
    "objectID": "reference/utils.event_log_from_ciw_recs.html#parameters",
    "href": "reference/utils.event_log_from_ciw_recs.html#parameters",
    "title": "utils.event_log_from_ciw_recs",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nciw_recs_obj\n\nThe output of the .get_all_records() method run on the ciw simulation object. This is a list of named tuples. See https://ciw.readthedocs.io/en/latest/Tutorial/GettingStarted/part_3.html and https://ciw.readthedocs.io/en/latest/Reference/results.html for more details.\nrequired\n\n\nnode_name_list\n\nUser-defined list of strings where each string relates to the resource or activity that will take place at that ciw node\nrequired",
    "crumbs": [
      "Reference",
      "ciw Utility Functions",
      "utils.event_log_from_ciw_recs"
    ]
  },
  {
    "objectID": "reference/utils.event_log_from_ciw_recs.html#returns",
    "href": "reference/utils.event_log_from_ciw_recs.html#returns",
    "title": "utils.event_log_from_ciw_recs",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\npd.DataFrame",
    "crumbs": [
      "Reference",
      "ciw Utility Functions",
      "utils.event_log_from_ciw_recs"
    ]
  },
  {
    "objectID": "reference/utils.event_log_from_ciw_recs.html#notes",
    "href": "reference/utils.event_log_from_ciw_recs.html#notes",
    "title": "utils.event_log_from_ciw_recs",
    "section": "",
    "text": "Given the ciw recs object, if we know the nodes and what they relate to, we can build up a picture the arrival date for the first tuple for a given user ID is the arrival\nThen, for each node: - the arrival date for a given node is when they start queueing - the service start date is when they stop queueing - the service start date is when they begin using the resource - the service end date is when the resource use ends - the server ID is the equivalent of a simpy resource use ID\nA more complex multi-node example can be found in https://github.com/Bergam0t/ciw-example-animation in the files - ciw_model.py - vidigi_experiments.py",
    "crumbs": [
      "Reference",
      "ciw Utility Functions",
      "utils.event_log_from_ciw_recs"
    ]
  },
  {
    "objectID": "reference/utils.VidigiPriorityStore.html",
    "href": "reference/utils.VidigiPriorityStore.html",
    "title": "utils.VidigiPriorityStore",
    "section": "",
    "text": "utils.VidigiPriorityStore()\nA SimPy store that processes requests with priority.\nThis class extends the SimPy Store to include a priority queue for handling requests. Requests are processed based on their priority, submission time, and preemption flag.\nAttributes: GetQueue (class): A reference to the sorted queue implementation used for handling prioritized requests. get (class): A reference to the PriorityGet class, which handles the creation of prioritized requests.\n\n\nCredit to arabinelli # https://stackoverflow.com/questions/58603000/how-do-i-make-a-priority-get-request-from-resource-store",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.VidigiPriorityStore"
    ]
  },
  {
    "objectID": "reference/utils.VidigiPriorityStore.html#notes",
    "href": "reference/utils.VidigiPriorityStore.html#notes",
    "title": "utils.VidigiPriorityStore",
    "section": "",
    "text": "Credit to arabinelli # https://stackoverflow.com/questions/58603000/how-do-i-make-a-priority-get-request-from-resource-store",
    "crumbs": [
      "Reference",
      "Simpy Utility Functions and Classes",
      "utils.VidigiPriorityStore"
    ]
  },
  {
    "objectID": "vidigi_docs/index.html",
    "href": "vidigi_docs/index.html",
    "title": "vidigi (Visual Interactive Dynamics and Integrated Graphical Insights)",
    "section": "",
    "text": "vidigi (Visual Interactive Dynamics and Integrated Graphical Insights)\n\n\nWelcome to vidigi - a package for visualising real or simulated pathways.\nPrimarily developed for healthcare simulation and intended to allow easy integration with tools like Streamlit so users can see the impact of changes to simulation parameters in real-time, vidigi\nvidigi is the Esperanto  for ‘to show’\n(or it’s the backronym ‘Visual Interactive Dynamics and Integrated Graphical Insights’ - whichever floats your boat)",
    "crumbs": [
      "Welcome"
    ]
  }
]