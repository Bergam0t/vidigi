{
  "hash": "309bc17e4e48540d39a45c89bc7c6505",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute:\n  eval: false\nformat:\n  html:\n    toc: true\n---\n\n## Introduction\n\nVisual display of the outputs of discrete event simulations in simpy have been identified as one of the limitations of simpy, potentially hindering adoption of FOSS simulation in comparison to commercial modelling offerings or GUI FOSS alternatives such as JaamSim.\n\n> When compared to commercial DES software packages that are commonly used in health research, such as Simul8, or AnyLogic, a limitation of our approach is that we do not display a dynamic patient pathway or queuing network that updates as the model runs a single replication. This is termed Visual Interactive Simulation (VIS) and can help users understand where process problems and delays occur in a patient pathway; albeit with the caveat that single replications can be outliers. A potential FOSS solution compatible with a browser-based app could use a Python package that can represent a queuing network, such as NetworkX, and displaying results via matplotlib. If sophisticated VIS is essential for a FOSS model then researchers may need to look outside of web apps; for example, salabim provides a powerful FOSS solution for custom animation of DES models.\n> -  Monks T and Harper A. Improving the usability of open health service delivery simulation models using Python and web apps [version 2; peer review: 3 approved]. NIHR Open Res 2023, 3:48 (https://doi.org/10.3310/nihropenres.13467.2)\n\n\nThis package allows visually appealing, flexible visualisations of the movement of entities through some kind of pathway.\n\nIt is primarily tested with discrete event simulations to be created from SimPy models, though has also been tested with the Ciw package.\n\n---\n\nPlotly is leveraged to create the final animation, meaning that users can benefit from the ability to further customise or extend the plotly plot, as well as easily integrating with web frameworks such as Streamlit, Dash or Shiny for Python.\n\nThe code has been designed to be flexible and could potentially be used with alternative simulation packages such as simmeR or Salabim if it is possible to provide all of the required details in the logs that are output.\n\n## Examples\n\nTo develop and demonstrate the concept, it has so far been used to incorporate visualisation into several existing simpy models that were not initially designed with this sort of visualisation in mind:\n- **a minor injuries unit**, showing the utility of the model at high resolutions with branching pathways and the ability to add in a custom background to clearly demarcate process steps\n\n{{< video videos/vidigi.mp4 >}}\n\n- **an elective surgical pathway** (with a focus on cancelled theatre slots due to bed unavailability in recovery areas), with length of stay displayed as well as additional text and graphical data\n\n{{< video videos/vidigi_orthopaedic_surgery_beds.mp4 >}}\n\n- **a community mental health assessment pathway**, showing the wait to an appointment as well as highlighting 'urgent' patients with a different icon and showing the time from referral to appointment below the patient icons when they attend the appointment.\n\n{{< video videos/vidigi_community_mental_health.mp4 >}}\n\n- **a community mental health assessment pathway with pooling of clinics**, showing the 'home' clinic for clients via icon so the balance between 'home' and 'other' clients can be explored.\n\n{{< video videos/vidigi_community_mental_health_pooled.mp4 >}}\n\n- **a community mental health assessment and treatment pathway**, showing the movement of clients between a wait list, a booking list, and returning for repeat appointments over a period of time while sitting on a caseload in between.\n\n{{< video videos/vidigi_community_mental_health_complex_repeat_caseload.mp4 >}}\n\n# Usage Instructions with SimPy\n\n:::{.callout-important}\n#### Test, test, and test again!\n\nBefore you start trying to incorporate vidigi into your model, make sure you take a backup of your model as it currently is.\n\nWhile vidigi has been tested to ensure that it's special resource classes work the same as existing simpy resource classes, it's still possible to accidentally change your model. There's also a chance that the vidigi classes don't work identically to simpy classes in more complex scenarios with reneging, baulking, or other conditional logic around resource allocation.\n\nTherefore, it's highly advisable to check the key output metrics from your model before and after incorporating vidigi!\n:::\n\n## Creating a visualisation from an existing model\n\nTwo key things need to happen to existing models to work with the visualisation code:\n1. All simpy resources need to be changed to simpy stores containing a custom resource with an ID attribute. Vidigi provides two helper classes - VidigiStore and VidigiPriorityStore - to support with this.\n2. Logging needs to be added at key points: **arrival, (queueing, resource use start, resource use end), departure**\nwhere the steps in the middle can be repeated for as many queues and resource types as required, with the minimum requirement being at least one of each of arrival, queueing, departure.\n\n### 1. All simpy resources need to be changed to simpy stores containing a custom resource with an ID attribute\n\nTo allow the use of resources to be visualised correctly - with entities staying with the same resource throughout the time they are using it - it is essential to be able to identify and track individual resources.\n\nBy default, this is not possible with Simpy resources. They have no ID attribute or similar.\n\n:::{.callout-info collapse=\"true\"}\n\nThe easiest workaround which drops fairly painlessly into existing models is to use a simpy store with a custom resource class.\n\nThe custom resource is setup as follows:\n\n::: {#d2c3cf3d .cell execution_count=1}\n``` {.python .cell-code}\nclass CustomResource(simpy.Resource):\n    def __init__(self, env, capacity, id_attribute=None):\n        super().__init__(env, capacity)\n        self.id_attribute = id_attribute\n\n    def request(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a request is made\n        return super().request(*args, **kwargs)\n\n    def release(self, *args, **kwargs):\n        # Add logic to handle the ID attribute when a release is made\n        return super().release(*args, **kwargs)\n```\n:::\n\n\nThe creation of simpy resources is then replaced with the following pattern:\n\n::: {#3a04170f .cell execution_count=2}\n``` {.python .cell-code}\nbeds = simpy.Store(environment)\n\nfor i in range(number_of_beds):\n    beds.put(\n        CustomResource(\n            environment,\n            capacity=1,\n            id_attribute=i+1)\n        )\n```\n:::\n\n\n:::\n\n`vidigi.resources` provides a helper function for setting up simpy resources in the required manner.\n\nFor a given resource that would have been created like this:\n\n::: {#5ebdd5b8 .cell execution_count=3}\n``` {.python .cell-code}\nnurses = simpy.Resource(simpy_environment, capacity=number_of_nurses)\n```\n:::\n\n\nYou would use\n\n::: {#bac8e00a .cell execution_count=4}\n``` {.python .cell-code}\nfrom vidigi.resources import VidigiStore\nnurses = VidigiStore(simpy_environment, num_resources=number_of_nurses)\n```\n:::\n\n\nWhile you are now using a simpy store, VidigiStore and VidigiPriorityStore have a number of helper methods to allow you to continue to use\n\nThis becomes slightly more complex with conditional requesting (for example, where a resource request is made but if it cannot be fulfilled in time, the requester will renege). This is covered to some extent in some of the provided examples, but further demonstrations of this are planned.\n\nThe benefit of this is that when we are logging, we can use the `.id_attribute` attribute of the custom resource to record the resource that was in use.\nThis can have wider benefits for monitoring individual resource utilisation within your model as well.\n\n### 2. Logging needs to be added at key points\n\nThe animation function needs to be passed an event log with the following layout:\n\n| patient | pathway  | event_type        | event                    | time | resource_id |\n|---------|----------|-------------------|--------------------------|------|-------------|\n| 15      | Primary  | arrival_departure | arrival                  | 1.22 |             |\n| 15      | Primary  | queue             | enter_queue_for_bed      | 1.35 |             |\n| 27      | Revision | arrival_departure | arrival                  | 1.47 |             |\n| 27      | Revision | queue             | enter_queue_for_bed      | 1.58 |             |\n| 12      | Primary  | resource_use_end  | post_surgery_stay_ends   | 1.9  | 4           |\n| 15      | Revision | resource_use      | post_survery_stay_begins | 1.9  | 4           |\n\nOne easy way to achieve this is by appending dictionaries to a list at each important point in the process.\nFor example:\n\n::: {#9ef9633e .cell execution_count=5}\n``` {.python .cell-code}\nevent_log = []\n...\n...\nevent_log.append(\n    {'patient': id,\n    'pathway': 'Revision',\n    'event_type': 'resource_use',\n    'event': 'post_surgery_stay_begins',\n    'time': simpy_environment.now,\n    'resource_id': bed.id_attribute}\n    )\n```\n:::\n\n\nThe list of dictionaries could then be converted to a pandas dataframe using\n\n::: {#27b4245e .cell execution_count=6}\n``` {.python .cell-code}\npd.DataFrame(event_log)\n```\n:::\n\n\nand passed to the animation function where required.\n\nHowever, from vidigi 1.0.0, you can use the EventLogger helper class instead! This will ensure the expected data is available throughout.\n\n::: {#1bc57992 .cell execution_count=7}\n``` {.python .cell-code}\nfrom vidigi.logging import EventLogger\n\nlogger = EventLogger(\n            # Pass in the simulation environment if using simpy\n            # so that the current sim time will be used when logging\n            env=simpy_environment,\n            # Optionally, pass in a run number (when running multiple iterations of your simulation,\n            # ensuring you can tell logs from different runs apart easily)\n            run_number=run_number\n            )\n```\n:::\n\n\nWe will access these helpers like so:\n\n- `logger.log_arrival()`\n- `logger.log_queue()`\n- `logger.log_resource_use_start()`\n- `logger.log_resource_use_end()`\n- `logger.log_departure()`\n\nThese are all of the key steps you are likely to need to log in a standard model\n\n- when people arrive\n- when they begin waiting for something to happen\n- when they are using a resource\n- when they finish using that resource\n- when they leave\n\nYou can have multiple instances of queues and resource use within your logs per entity.\n\nHowever, each entity should have only one arrival and one departure.\n\nFor arrivals and departures, only the entity ID - e.g. a patient or customer identifier - needs to be passed in.\n\nFor queues, we also need to provide an event name to the `event` parameter to identify the step later on.\n\nFor resource use (both start and end), we need to provide an event name to the `event` parameter, and also provide a `resource_id` so that we are tracking which resource is in use when - which is why we needed to make the change to use the VidigiStore earlier.\n\n#### Event types\n\n##### arrival_departure\n\nWithin this, a minimum of two 'arrival_departure' events per entity are mandatory - `arrival` and `depart`, both with an event_type of `arrival_departure`, as shown below.\n\n::: {#274190ce .cell execution_count=8}\n``` {.python .cell-code}\nlogger.log_arrival(\n        entity_id=patient.identifier\n        )\n```\n:::\n\n\n::: {#c80dc216 .cell execution_count=9}\n``` {.python .cell-code}\nlogger.log_departure(\n        entity_id=patient.identifier\n        )\n```\n:::\n\n\nThese are critical as they are used to determine when patients should first and last appear in the model.\nForgetting to include a departure step for all types of patients can lead to slow model performance as the size of the event logs for individual moments will continue to increase indefinitely.\n\n:::{.callout-note collapse=\"true\"}\n### Click to see how we'd do this with a dictionary instead\n\n::: {#3f8cdaae .cell execution_count=10}\n``` {.python .cell-code}\nevent_log.append(\n      {'patient': unique_entity_identifier,\n      'pathway': 'Revision',\n      'event_type': 'arrival_departure',\n      'event': 'arrival',\n      'time': env.now}\n  )\n```\n:::\n\n\n::: {#04555ff7 .cell execution_count=11}\n``` {.python .cell-code}\nevent_log.append(\n      {'patient': unique_entity_identifier,\n      'pathway': 'Revision',\n      'event_type': 'arrival_departure',\n      'event': 'depart',\n      'time': env.now}\n  )\n```\n:::\n\n\n:::\n\n##### queue\n\nQueues are key steps in the model.\n\nIt is possible to solely use queues and never make use of a simpy resource.\n\nBy tracking each important step in the process as a 'queue' step, the movement of patients can be accurately tracked.\n\nEntities will be ordered by the point at which they are added to the queue, with the first entries appearing at the front (bottom-right) of the queue.\n\n::: {#a1ab3cd6 .cell execution_count=12}\n``` {.python .cell-code}\nlogger.log_queue(\n    entity_id=patient.identifier,\n    event=\"treatment_wait_begins\"\n)\n```\n:::\n\n\nWhile the keys shown above are mandatory, you can add as many additional keys to a step's log as desired. This can allow you to flexibly make use of the event log for other purposes as well as the animation.\n\n:::{.callout-note collapse=\"true\"}\n### Click to see how we'd do this with a dictionary instead\n\n::: {#6e4e66b1 .cell execution_count=13}\n``` {.python .cell-code}\nevent_log.append(\n            {'patient': unique_entity_identifier,\n             'pathway': 'High intensity',\n             'event_type': 'queue',\n             'event': 'appointment_booked_waiting',\n             'time': self.env.now\n             }\n        )\n```\n:::\n\n\n:::\n\n\n##### resource_use and resource_use_end\n\nResource use is more complex to include but comes with two key benefits over the queue:\n- it becomes easier to monitor the length of time a resource is in use by a single entity as users won't 'move through' the resource use stage (which can also prove confusing to less experienced viewers)\n- it becomes possible to show the total number of resources that are available, making it easier to understand how well resources are being utilised at different stages\n\n::: {#64b99b12 .cell execution_count=14}\n``` {.python .cell-code}\nwith treatment_cubicles.request() as req:\n        # Make sure we assign the result of the yield to a variable\n        # Assuming we are using a VidigiStore or VidigiPriorityStore, this will allow us\n        # to access the useful ID attribute of the returned resource\n        treatment_cubicle = yield req\n\n        # As we've waited for a resource to become available\n        #  with the `yield req`, we can now record\n        # that the user's resource use is starting\n        logger.log_resource_use_start(\n                entity_id=patient.identifier,\n                event=\"treatment_begins\",\n                resource_id=treatment_cubicle.id_attribute\n                )  #<<\n\n        yield self.env.timeout(1) # some amount of time\n\n        # Now that we have waited for the patient to be seen,\n        # we can log that their use of the resource has ended\n        self.logger.log_resource_use_end(\n            entity_id=patient.identifier,\n            event=\"treatment_complete\",\n            resource_id=treatment_cubicle.id_attribute\n            )\n```\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n### Click to see how we'd do this with a dictionary instead\n\n::: {#210713bb .cell execution_count=15}\n``` {.python .cell-code}\nevent_log.append(\n    {'patient': unique_entity_identifier,\n     'pathway': 'Trauma',\n     'event_type': 'resource_use',\n     'event': 'triage_begins',\n     'time': env.now,\n     'resource_id': triage_resource.id_attribute\n    }\n)\n\nyield self.env.timeout(1) # some amount of time\n\nevent_log.append(\n            {'patient': unique_entity_identifier,\n             'pathway': 'Trauma',\n             'event_type': 'resource_use_end',\n             'event': 'triage_complete',\n             'time': env.now,\n             'resource_id': triage_resource.id_attribute}\n        )\n```\n:::\n\n\n:::\n\nWhen providing your event position details, it then just requires you to include an identifier for the resource.\n\nThis requires you to be using an class to manage your resource counts (if following HSMA simpy structure, this will be your g class).\n\n## Creating the animation\n\n### Determining event positioning in the animation\nOnce the event log has been created, the positions of each queue and resource must be set up.\n\nAn easy way to create this is passing a list of dictionaries to the `pd.DataFrame` function.\n\nThe columns required are\n`event`: This must match the label used for the event in the event log\n`x`: The x coordinate of the event for the animation. This will correspond to the bottom-right hand corner of a queue, or the rightmost resource.\n`y`: The y coordinate of the event for the animaation. This will correspond to the lowest row of a queue, or the central point of the resources.\n`label`: A label for the stage. This can be hidden at a later step if you opt to use a background image with labels built-in. Note that line breaks in the label can be created using the HTML tag `<br>`.\n`resource` (OPTIONAL): Only required if the step is a resource_use step. This looks at the 'scenario' object passed to the `animate_activity_log()` function and pulls the attribute with the given name, which should give the number of available resources for that step.\n\n\nVidigi provides some helper classes and functions for setting this up.\n\n::: {#eca0f411 .cell execution_count=16}\n``` {.python .cell-code}\nfrom vidigi.utils import create_event_position_df, EventPosition\n\nevent_position_df = create_event_position_df([\n    EventPosition(event='arrival', x=50, y=450, label=\"Arrival\"),\n    EventPosition(event='treatment_wait_begins', x=205, y=275, label=\"Waiting for Treatment\"),\n    EventPosition(event='treatment_begins', x=205, y=175, label=\"Being Treated\", resource='n_cubicles'),\n    EventPosition(event='depart', x=270, y=70, label=\"Exit\")\n])\n```\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n### Click to see how we'd do this with a dictionary instead\n\nIf you'd rather not use the Vidigi helpers for this, you can just pass it as a dataframe, which can be easily generated with a list of dictionaries.\n\n::: {#77b18b33 .cell execution_count=17}\n``` {.python .cell-code}\n        event_position_df = pd.DataFrame([\n                # Triage\n                {'event': 'triage_wait_begins',\n                 'x':  160, 'y': 400, 'label': \"Waiting for<br>Triage\"  },\n                {'event': 'triage_begins',\n                 'x':  160, 'y': 315, 'resource':'n_triage', 'label': \"Being Triaged\" },\n\n                # Trauma pathway\n                {'event': 'TRAUMA_stabilisation_wait_begins',\n                 'x': 300, 'y': 560, 'label': \"Waiting for<br>Stabilisation\" },\n                {'event': 'TRAUMA_stabilisation_begins',\n                 'x': 300, 'y': 500, 'resource':'n_trauma', 'label': \"Being<br>Stabilised\" },\n\n                {'event': 'TRAUMA_treatment_wait_begins',\n                 'x': 630, 'y': 560, 'label': \"Waiting for<br>Treatment\" },\n                {'event': 'TRAUMA_treatment_begins',\n                 'x': 630, 'y': 500, 'resource':'n_cubicles', 'label': \"Being<br>Treated\" },\n\n                 {'event': 'depart',\n                 'x':  670, 'y': 330, 'label': \"Exit\"}\n            ])\n```\n:::\n\n\n:::\n\n### Creating the animation\nThere are two main ways to create the animation:\n\n- using the one-step function `animate_activity_log()`\n    - See [this simple example](../examples/example_1_simplest_case/ex_1_simplest_case.ipynb) or [this slightly more complex example](../examples/example_2_branching_multistep/ex_2_branching_multistep_case.ipynb) for a demonstration of this.\n\n- using the functions `reshape_for_animations()`, `generate_animation_df()` and `generate_animation()` separately, passing the output of each to the next step. This allows you to apply significant extra customisations to things such as entity icons for patients of different classes.\n    - See [this priority queueing example](../examples/example_3_simplest_case_priority_resource/ex_3_simplest_case_priority_resource.ipynb) for a demonstration of this.\n\n\n# Models used as examples\n\n## Emergency department (Treatment Centre) model\nMonks.T, Harper.A, Anagnoustou. A, Allen.M, Taylor.S. (2022) Open Science for Computer Simulation\n\nhttps://github.com/TomMonks/treatment-centre-sim\n\nThe layout code for the emergency department model: https://github.com/hsma-programme/Teaching_DES_Concepts_Streamlit\n\n## The hospital efficiency project model\nHarper, A., & Monks, T. Hospital Efficiency Project Orthopaedic Planning Model Discrete-Event Simulation [Computer software]. https://doi.org/10.5281/zenodo.7951080\n\nhttps://github.com/AliHarp/HEP/tree/main\n\n## Simulation model with scheduling example\nMonks, T.\n\nhttps://github.com/health-data-science-OR/stochastic_systems\n\nhttps://github.com/health-data-science-OR/stochastic_systems/tree/master/labs/simulation/lab5\n\n# Licences for adapted code\n\nResource and Store code has been adapted from SimPy. Licence code for SimPy is provided below.\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Ontje Lünsdorf and Stefan Scherfke (also see AUTHORS.txt)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\nand associated documentation files (the “Software”), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
    "supporting": [
      "introduction_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}