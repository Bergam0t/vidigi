# utils.VidigiPriorityStore { #vidigi.utils.VidigiPriorityStore }

```python
utils.VidigiPriorityStore(self, env, capacity=float('inf'), init_items=None)
```

A SimPy Store that processes 'get' requests based on priority.
Lower priority numbers represent higher priority and are processed first.
Supports the context manager pattern for automatic item return.

Inherits from simpy.Store and overrides the get queue logic and binds
PriorityGet to the get method.

## Attributes

| Name | Description |
| --- | --- |
| [capacity](#vidigi.utils.VidigiPriorityStore.capacity) | Get the capacity of the store |
| [items](#vidigi.utils.VidigiPriorityStore.items) | Get all items currently in the store |

## Methods

| Name | Description |
| --- | --- |
| [get](#vidigi.utils.VidigiPriorityStore.get) | Alias for request() to maintain compatibility with both patterns. |
| [get_direct](#vidigi.utils.VidigiPriorityStore.get_direct) | Get an item from the store without the context manager. |
| [put](#vidigi.utils.VidigiPriorityStore.put) | Put an item into the store. |
| [request](#vidigi.utils.VidigiPriorityStore.request) | Request context manager for getting an item from the store. |
| [request_direct](#vidigi.utils.VidigiPriorityStore.request_direct) | Alias for get_direct() to maintain consistent API with SimPy resources. |

### get { #vidigi.utils.VidigiPriorityStore.get }

```python
utils.VidigiPriorityStore.get()
```

Alias for request() to maintain compatibility with both patterns.

Returns:
    A context manager for getting an item

### get_direct { #vidigi.utils.VidigiPriorityStore.get_direct }

```python
utils.VidigiPriorityStore.get_direct()
```

Get an item from the store without the context manager.
Use this if you don't want to automatically return the item.

Returns:
    A get event that can be yielded

### put { #vidigi.utils.VidigiPriorityStore.put }

```python
utils.VidigiPriorityStore.put(item)
```

Put an item into the store.

Args:
    item: The item to put in the store

### request { #vidigi.utils.VidigiPriorityStore.request }

```python
utils.VidigiPriorityStore.request(priority)
```

Request context manager for getting an item from the store.
The item is automatically returned when exiting the context.

Usage:
    with store.request() as req:
        yield req  # This yields the get event
        # Now we have the item from the store
        yield env.timeout(10)
        # Item is automatically returned when exiting the context

Returns:
    A context manager that returns the get event and handles returning the item

### request_direct { #vidigi.utils.VidigiPriorityStore.request_direct }

```python
utils.VidigiPriorityStore.request_direct()
```

Alias for get_direct() to maintain consistent API with SimPy resources.

Returns:
    A get event that can be yielded