# utils.VidigiStore { #vidigi.utils.VidigiStore }

```python
utils.VidigiStore(self, env, capacity=float('inf'), init_items=None)
```

A wrapper around SimPy's Store that allows using a context manager pattern
similar to resource requests.

This allows code like:

with store.request() as req:
    yield req
    # Use the item that was obtained
    yield env.timeout(10)
    # Item is automatically returned when exiting the context

AI USE DISCLOSURE: This code was generated by Claude 3.7 Sonnet. It has been evaluated
and tested by a human.

## Attributes

| Name | Description |
| --- | --- |
| [capacity](#vidigi.utils.VidigiStore.capacity) | Get the capacity of the store |
| [items](#vidigi.utils.VidigiStore.items) | Get all items currently in the store |

## Methods

| Name | Description |
| --- | --- |
| [get](#vidigi.utils.VidigiStore.get) | Alias for request() to maintain compatibility with both patterns. |
| [get_direct](#vidigi.utils.VidigiStore.get_direct) | Get an item from the store without the context manager. |
| [put](#vidigi.utils.VidigiStore.put) | Put an item into the store. |
| [request](#vidigi.utils.VidigiStore.request) | Request context manager for getting an item from the store. |
| [request_direct](#vidigi.utils.VidigiStore.request_direct) | Alias for get_direct() to maintain consistent API with SimPy resources. |

### get { #vidigi.utils.VidigiStore.get }

```python
utils.VidigiStore.get()
```

Alias for request() to maintain compatibility with both patterns.

Returns:
    A context manager for getting an item

### get_direct { #vidigi.utils.VidigiStore.get_direct }

```python
utils.VidigiStore.get_direct()
```

Get an item from the store without the context manager.
Use this if you don't want to automatically return the item.

Returns:
    A get event that can be yielded

### put { #vidigi.utils.VidigiStore.put }

```python
utils.VidigiStore.put(item)
```

Put an item into the store.

Args:
    item: The item to put in the store

### request { #vidigi.utils.VidigiStore.request }

```python
utils.VidigiStore.request()
```

Request context manager for getting an item from the store.
The item is automatically returned when exiting the context.

Usage:
    with store.request() as req:
        yield req  # This yields the get event
        # Now we have the item from the store
        yield env.timeout(10)
        # Item is automatically returned when exiting the context

Returns:
    A context manager that returns the get event and handles returning the item

### request_direct { #vidigi.utils.VidigiStore.request_direct }

```python
utils.VidigiStore.request_direct()
```

Alias for get_direct() to maintain consistent API with SimPy resources.

Returns:
    A get event that can be yielded